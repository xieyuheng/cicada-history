#+title: TODO

* a language with fulfilling type system

* formalize category-category

*** universal-construction

    - a carefully designed modelling of universal-construction
      is the core of modelling category-theory

*** prove iso for universal-construction

    - a universal-construction is unique up to unique isomorphism

    - we need to use unique to prove eqv

*** set

***** representable-functor and set

***** fix set-morphism-t -- with set-t

      - maybe no top level eqv-t

      - x -
        maybe we can not afford to do this.
        for syntax reason.

***** set-category

      - surjective

      - injective

      - bijective

*** arrow-eqv-t -- amend `arrow-eqv-relation` for all category

    - arrow-eqv-t must be an eqv-relation-t
      for all hom-set [a b arrow-t]

*** bifunctor

    - checking functorial laws of pair of categories,
      [where pair is Cartesian product]
      is equivalent to
      checking functorial laws for each component of the pair.

      - this is the whole point of Cartesian product

*** monad as category

* the semantic is modelled in itself

*** dependent-category -- use pullback, pushout and equalizer

    - maybe we still need to get out of category at the end

    - to open a new mode of explanation

*** topos-theory

*** should (:) (<:) form types too ? -- like eqv-c

*** algebraic structure

    - (*) and (+) in type-t
      provide two commutative monoidal structures -- semi-ring-t
      for we canâ€™t define subtraction of types.
      -- a.k.a rig-t, ring without negative.

      - note that, to be monoidal-category,
        the binary operator must also be a bifunctor.

        i.e. the monoidal product must be
        compatible with the structure of the category,
        which is defined by morphisms.

    - order relation for algebraic data type

      for example :
      a < a + b
      a < a * 2

      this can be viewed as a functor from type-t to rational-t

    - x -
      can we extend the algebraic structure to dependent type ?

    - k -
      we will need to extend the algebraic structure to object

    - x -
      object are just like type.
      just without sum-type, only product-type.

* can be used as a logic programming language

*** logic programming interface of the type system

* can be used as a prover for everyday mathematics

*** use number theory to test type-checker as prover

*** nat-total-order

* covers many topics of important mathematical ideas

*** Ordinal number

    - https://en.wikipedia.org/wiki/Ordinal_number

    - well-order

    - Order type

    - Every well-ordered set is order-equivalent
      to exactly one ordinal number.

*** Cardinal number

    - https://en.wikipedia.org/wiki/Cardinal_number

    - In category theory,
      the cardinal numbers form a skeleton of the category of sets.

*** Skeleton (category theory)

    - https://en.wikipedia.org/wiki/Skeleton_(category_theory)

*** Cantor's diagonal argument

    - https://en.wikipedia.org/wiki/Cantor%27s_diagonal_argument
