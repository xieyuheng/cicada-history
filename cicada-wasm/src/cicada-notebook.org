#+property: tangle lib.rs
#+title: cicada notebook

* prolog

*** feature

    #+begin_src rust
    #![feature (uniform_paths)]
    #![feature (bind_by_move_pattern_guards)]
    #![feature (box_patterns)]
    #![feature (box_syntax)]

    #![allow (dead_code)]
    #+end_src

*** use

    #+begin_src rust
    use error_report::{
        // ErrorMsg,
        ErrorCtx,
        // ErrorInCtx,
    };
    use cicada::{
        Module,
        report_obj_dic,
    };
    use wasm_bindgen::prelude::*;
    #+end_src

* CicadaModule

  #+begin_src rust
  #[wasm_bindgen]
  pub struct CicadaModule {
      module: Module
  }
  #+end_src

* CicadaModule::clone

  #+begin_src rust
  #[wasm_bindgen]
  impl CicadaModule {
      pub fn clone (&self) -> Self {
          CicadaModule { module: self.module.clone () }
      }
  }
  #+end_src

* CicadaModule::new

  #+begin_src rust
  #[wasm_bindgen]
  impl CicadaModule {
      pub fn new () -> CicadaModule {
          let module = Module::new ();
          CicadaModule { module }
      }
  }
  #+end_src

* CicadaModule::run

  #+begin_src rust
  #[wasm_bindgen]
  impl CicadaModule {
      pub fn run (&mut self, input: &str) -> String {
          match self.module.run (input) {
              Ok (obj_dic) => {
                  report_obj_dic (&obj_dic)
              }
              Err (error) => {
                  error.report (ErrorCtx::new ()
                                .body (&input))
              }
          }
      }
  }
  #+end_src
