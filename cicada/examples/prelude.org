#+property: tangle prelude.cic
#+title: prelude

* bool-t

  #+begin_src cicada
  bool-t = disj (
      true-t
      false-t
  ) {}

  true-t = conj {}

  false-t = conj {}
  #+end_src

* nat-t

  #+begin_src cicada
  nat-t = disj (
      zero-t
      succ-t
  ) {}

  zero-t = conj {}

  succ-t = conj {
      prev : nat-t
  }
  #+end_src

* nat-even-t

  #+begin_src cicada
  nat-even-t = disj (
      zero-even-t
      even-plus-two-even-t
  ) {
      nat : nat-t
  }

  zero-even-t = conj {
      nat : nat-t
      nat = zero-c
  }

  even-plus-two-even-t = conj {
      nat : nat-t
      prev : nat-even-t (:m)
      nat = succ-c (succ-c (:m))
  }
  #+end_src

* list-t

  #+begin_src cicada
  list-t = disj (
      null-t
      cons-t
  ) {
      t : type
  }

  null-t = conj {
      t : type
  }

  cons-t = conj {
      t : type
      car : t
      cdr : list-t (t)
  }
  #+end_src

* list-length-t

  #+begin_src cicada
  list-length-t = disj (
      zero-length-t
      succ-length-t
  ) {
      list : list-t (:t)
      length : nat-t
  }

  zero-length-t = conj {
      list : list-t (:t)
      length : nat-t
      list = null-c
      length = zero-c
  }

  succ-length-t = conj {
      list : list-t (:t)
      length : nat-t
      prev : list-length-t { list = :cdr, length = :n }
      list = cons-c { t = :t, car = :x, cdr = :cdr }
      length = succ-c (:n)
  }
  #+end_src

* list-append-t

  #+begin_src cicada
  list-append-t = disj (
      zero-append-t
      succ-append-t
  ) {
      ante : list-t
      succ : list-t
      result : list-t
  }

  zero-append-t = conj {
      ante : list-t
      succ : list-t
      result : list-t
      ante = null-c
      result = succ
  }

  succ-append-t = conj {
      ante : list-t
      succ : list-t
      result : list-t
      prev : list-append-t (:cdr succ :result-cdr)
      ante = cons-c { car = :car, cdr = :cdr }
      result = cons-c { car = :car, cdr = :result-cdr }
  }
  #+end_src

* vect-t

  #+begin_src cicada
  vect-t = disj (
      null-vect-t
      cons-vect-t
  ) {
      t : type
      length : nat-t
  }

  null-vect-t = conj {
      t : type
      length : nat-t
      length = zero-c
  }

  cons-vect-t = conj {
      t : type
      length : nat-t
      car : t
      cdr : vect-t (t :n)
      length = succ-c (:n)
  }
  #+end_src

* test

  #+begin_src cicada
  prove (3) {
      bool : bool-t
  }

  prove (3) {
      nat : nat-t
  }

  prove (3) {
      list : list-t (nat-t)
  }

  prove (3) {
      list : list-t (list-t (nat-t))
  }

  prove (3) {
      zero-even : nat-even-t (zero-c)
      two-even : nat-even-t (succ-c (succ-c (zero-c)))
  }

  prove (3) {
      null-length : list-length-t (
          null-c
          zero-c)
  }

  prove (3) {
      length-one : list-length-t {
          list = cons-c (nat-t zero-c null-c)
          length = succ-c (zero-c)
      }
  }

  prove (3) {
      length-two : list-length-t {
          list = cons-c (nat-t zero-c cons-c (zero-c null-c))
          length = succ-c (succ-c (zero-c))
      }
  }

  prove (3) {
      list-length : list-length-t {
          list = cons-c (nat-t zero-c cons-c (zero-c null-c))
          length = :n
      }
  }

  prove (3) {
      list-length : list-length-t {
          list = :l
          length = :n
      }
  }
  #+end_src
