#+title: function-type

* [note]

*** arrow-type can not occur in fields of x : type : type-tt

    - we do not let arrow-type to occur in fields of type defined by (+type)
      because type of type type-tt has interface function 'eqv-p'
      but arrow-type break this interface function

* the interface of function type

  - if we view function type (-> ... -- ...) as a type class
    the only interface function of this class is 'apply'

  - note that, 'eq-p' is not its interface function.

* function space has no data-constructors

  - for an simple inductive-type,
    cover all the data-constructors,
    and use some recursion,
    then we can traversal the space.

  - for a higher inductive-space,
    we still can cover
    all the higher data-constructors.

  - but for function space,
    there are so many different ways
    to construct a function in the space.
    there is not hope to cover them all.

  - x -
    if we are given a hypothetically constructed function
    of type (-> A -- B),
    and we need to prove (-> (-> A -- B) -- ...).

    it seems we still can make use of it
    by function application and function composition.

  - k -
    that is about elim-rules,
    to eliminate something is to make use of something,
    while the thing to be made use of
    is hypothetically constructed objects.

    1. to make use of a hypothetically constructed object
       of a inductively defined type,
       [to eliminate a inductively defined type]

       we cover all the data-constructors
       then de-construct the data,
       and do recursion whenever needed.

    2. it is easier to eliminate (+ ... ...) and (* ... ...),
       for they can be viewed as un-named inductive type.

    3. to make use of a hypothetically constructed function
       of certain type,
       [to eliminate a function space]

       we apply it or compose it.

* higher type also has no data-constructors

  - x -
    we can construct functions
    which accept data and return types.
    we can construct such functions
    by covering all possible data.

    we can also construct functions
    which accept type and return types.
    but in this case,
    we can not cover all the possible inputs
    that belong to the type.

    just like we can not cover all the possible
    functions of certain function type.

  - k -
    and, for hypothetically constructed function,
    we can use them by function application
    and function composition.

    but if we are given a hypothetically constructed type,
    of type Type,
    we have no informations about how to use them.

  - x -
    informations in (-> A -- B) allow us
    to apply or compose function of this type.
    can we generalize this ?

  - k -
    we have 'apply' and 'compose' for function of type (-> A -- B)
    because we can implement 'apply' and 'compose'.
    can we handle equivalence in similar manner ?
    for we can implement unification.
    instead of define eqv-t in the language,
    can we make eqv-t built-in ?

  - x -
    a function of type (-> A -- B)
    has rich information in its function body,
    but a element of type eqv-t can only be eqv-c.

  ------

  - k -
    yes, but the type of eqv-c is rich
    and we can pull information out from type at runtime.

  - x -
    but the interface we defined for eqv-t seems just fine
    maybe we should think about interface functions of chain-type (=>)

* equivalence between function body

  - we might unifiy two hypos,
    if the function body are [structurally] the same
    and their arguments can be unified

  - and the equivalence between function body
    is not limited to 'structurally the same',
    we can also prove two function bodys are the same.

  - the definition of equivalence of function :

    #+begin_src jojo
    (note
      (: f (-> A -- B))
      (: g (-> A -- B))
      (:= (~ f g)
          (-> :x : A -- (= :x f :x g))))
    #+end_src

    - for example
      'add-commutative' is just saying (~ {add} {swap add})
      'add-associative' is just saying (~ {add :z add} {:z add add})

    - we just need to supply the arguments of the function
      to get back (+proof add-commutative)
      and (+proof add-commutative)

* the algebra of relation

  - my aim of studying the algebra of relation
    is to see

    - can we capture the meaning of "for all"
      in pure logic programming language
      without function-type

  - 只要問
    (1) 函數作爲特殊的關係有什麼特殊性
    (2) 這些特殊性能否在 logic programming 中被表達出來

    - 函數作爲特殊的關係的特殊性有兩點
      1. 函數是單射 -- 函數作爲不變量 可以用來證明 "not equal"
      2. 反函數是滿射 -- 函數可以捕捉 "for all"

    - ><><><
      這兩個性質可否在 logic programming 中被表達出來呢

    - 從 relation 的角度看
      定義 function 的方式保證了 關係的這兩點特殊性

      - 一般的
        可能有別的特殊的定義關係的方法
        能用來保證關係的其他特殊性
