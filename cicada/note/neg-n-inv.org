#+title: negation and invariant

* invariant

  - an invariant is a classification

  - an invariant is a function classifies domain by range

  - a function is an invariant classifies domain by range

  - invariants are used to prove "not equal"
    - 函數的單隻性的意義就在於此

  - a predicate classifies domain by the range bool-t

* type == classification == invariant

  - value -> type 這個映射
    是以 type 來分類 value
    [類型當然是用來做分類的]

  - 利用類型檢查
    我們可以保證沒有不良的函數複合
    類型檢查的意義超越了 單純的證明 "not equal"

  - "not equal" => "can not unify" => "can not compose"

  - 數據的類型不一定是唯一的
    因爲一個空間可能有多種不變量

* negation

  - [古典邏輯中的]否定可否被看成是不充分的分類
    畢竟分類都是肯定的[具有構造性的]

  - 對於 type 是可以做否定的
    注意
    type-constructor 作用於具體的元素
    所得到的是這個 type-constructor 所蘊含的所有元素的集合的子集

* predicate

  #+begin_src cicada
  -- n : nat-t -> | ([is-even-t (n) is-odd-t (n)])
  -- [m n] : nat-t -> | ([eqv-t (m n) lt-t (m n) gt-t (m n)])
  #+end_src
