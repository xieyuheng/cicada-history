#+property: tangle lib.rs
#+title: cicada
- Subst::unify -- for Data
- Term::to_data -- with error_report
- Wissen::den
- Wissen::check
* [note]

*** Cons & Prop

    - Cons -- data-constructor
    - Prop -- type-constructor

    - Den::Disj is definition of Prop
    - Den::Conj is definition of Prop and Cons

*** Data

    - Cons::to_data will get a Data with default-record
      the default-record of Cons is specified by its definition

    - during Cons::to_data
      its default-record is unified with its args

    - this is like runtime assertion in prolog

*** type-check

    - type-check is simply to check that
      the equation in `data` has a solution

    - `disj` -- exporting equations
      `heir` -- importing equations

*** recursion

    - define all Den first and then check them

*** logic-var

    - single char words are not allowed in global definition
      and are not allowed as field-name

    - single char words are viewed as logic-var

    - long logic-var start with `:`

    - x -
      maybe just use `:` to be more consistent

*** proving

    - Prop is to be proved

    - to prove a Prop defined by Den::Disj
      is to dispatch it

    - to prove a Prop defined by Den::Conj
      we unify args withs fields
      and we also need to prove remaining Prop in Data

    - `heir` is just like `data`

*** Grammar

    Den::Disj = { "disj" '(' list (prop-name?) ')' Arg::Record }
    Den::Conj = { "conj" Arg::Record }
    Term::Var = { var-name? }
    Term::Cons = { cons-name? Arg }
    Term::Prop = { prop-name? Arg }
    Arg::Tuple = { '(' list (Term) ')' }
    Arg::Record = { '{' list (Binding) '}' }
    Binding::Term = { field-name? "=" Term }

* prolog

*** feature

    #+begin_src rust
    #![feature (uniform_paths)]
    #![feature (bind_by_move_pattern_guards)]
    #![feature (box_patterns)]
    #![feature (box_syntax)]

    #![allow (dead_code)]
    #+end_src

*** use

    #+begin_src rust
    use std::fmt;
    use std::sync::Arc;
    use std::collections::VecDeque;
    use std::collections::HashMap;
    use std::collections::HashSet;
    use uuid::Uuid;
    use dic::Dic;
    use error_report::{
        Span,
        ErrorMsg,
        ErrorInCtx,
    };
    #[cfg (test)]
    use error_report::{
        ErrorCtx,
    };
    use mexp::{
        SyntaxTable,
        Mexp,
        MexpArg,
    };
    #+end_src

* utility

*** vec_to_string

    #+begin_src rust
    fn vec_to_string <T> (vec: &Vec <T>, delimiter: &str) -> String
    where T : ToString {
        let mut s = String::new ();
        for x in vec {
            s += &x.to_string ();
            s += delimiter;
        }
        for _ in 0 .. delimiter.len () {
            s.pop ();
        }
        s
    }
    #+end_src

*** vec_to_lines

    #+begin_src rust
    fn vec_to_lines <T> (vec: &Vec <T>) -> String
    where T : ToString {
        let mut s = vec_to_string (vec, "\n");
        if ! s.is_empty () {
            s += "\n";
        }
        s
    }
    #+end_src

* Term

*** Term

    #+begin_src rust
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq, Eq)]
    pub enum Term {
        Var (Span, Var),
        Cons (Span, String, Arg),
        Prop (Span, String, Arg),
    }
    #+end_src

*** Arg

    #+begin_src rust
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq, Eq)]
    pub enum Arg {
        Vec (Vec <Term>),
        Dic (Dic <Term>),
    }
    #+end_src

* Var

*** Var

    #+begin_src rust
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq, Eq, Hash)]
    pub struct Var {
        name: String,
        id: Option <Id>,
    }
    #+end_src

*** Var::to_string

    #+begin_src rust
    impl ToString for Var {
        fn to_string (&self) -> String {
            let mut s = format! ("{}", self.name);
            if let Some (id) = &self.id {
                s += &format! ("#{}", id.to_string ());
            }
            s
        }
    }
    #+end_src

*** Id

    #+begin_src rust
    #[derive (Clone)]
    #[derive (PartialEq, Eq, Hash)]
    pub enum Id {
        Uuid (uuid::adapter::Hyphenated),
        Local (usize),
    }
    #+end_src

*** Id::uuid

    #+begin_src rust
    impl Id {
        fn uuid () -> Self {
            Id::Uuid (Uuid::new_v4 () .to_hyphenated ())
        }
    }
    #+end_src

*** Id::local

    #+begin_src rust
    impl Id {
        fn local (counter: usize) -> Self {
            Id::Local (counter)
        }
    }
    #+end_src

*** Id::fmt

    #+begin_src rust
    impl fmt::Debug for Id {
        fn fmt (&self, f: &mut fmt::Formatter) -> fmt::Result {
            match self {
                Id::Uuid (uuid) => write! (f, "{}", uuid),
                Id::Local (counter) => write! (f, "{}", counter),
            }
        }
    }
    #+end_src

*** Id::to_string

    #+begin_src rust
    impl ToString for Id {
        fn to_string (&self) -> String {
            match self {
                Id::Uuid (uuid) => format! ("{}", uuid),
                Id::Local (counter) => format! ("{}", counter),
            }
        }
    }
    #+end_src

* Data

*** Data

    #+begin_src rust
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq, Eq)]
    pub enum Data {
        Var (Var),
        Data (String, Dic <Data>),
    }
    #+end_src

* Subst

*** Subst

    #+begin_src rust
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq, Eq)]
    pub enum Subst {
        Null,
        Cons (Var, Data, Arc <Subst>),
    }
    #+end_src

* Den

*** Den

    #+begin_src rust
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq, Eq)]
    pub enum Den {
        Disj (Vec <String>, Dic <Term>),
        Conj (Dic <Term>),
    }
    #+end_src

* Wissen

* Statement

* Proving

* Proof

* Qed

* syntax

* test
