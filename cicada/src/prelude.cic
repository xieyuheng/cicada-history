bool-t = disj (
    true-t
    false-t
) {}

true-t = conj {}

false-t = conj {}

nat-t = disj (
    zero-t
    succ-t
) {}

zero-t = conj {}

succ-t = conj {
    prev : nat-t
}

nat-even-t = disj (
    zero-even-t
    even-plus-two-even-t
) {
    nat : nat-t
}

zero-even-t = conj {
    nat : nat-t
    nat = zero-c
}

even-plus-two-even-t = conj {
    nat : nat-t
    prev : nat-even-t (m)
    nat = succ-c (succ-c (m))
}

list-t = disj (
    null-t
    cons-t
) {
    ty : type
}

null-t = conj {
    ty : type
}

cons-t = conj {
    ty : type
    car : ty
    cdr : list-t (ty)
}

list-length-t = disj (
    zero-length-t
    succ-length-t
) {
    list : list-t (t)
    length : nat-t
}

zero-length-t = conj {
    list : list-t (t)
    length : nat-t
    list = null-c
    length = zero-c
}

succ-length-t = conj {
    list : list-t (t)
    length : nat-t
    prev : list-length-t (l n)
    list = cons-c (x l)
    length = succ-c (n)
}

list-append-t = disj (
    zero-append-t
    succ-append-t
) {
    [ante succ result] : list-t (t)
}

zero-append-t = conj {
    [ante succ result] : list-t (t)
    ante = null-c
    result = succ
}

succ-append-t = conj {
    [ante succ result] : list-t (t)
    prev : list-append-t (cdr succ result-cdr)
    ante = cons-c (car cdr)
    result = cons-c (car result-cdr)
}

vect-t = disj (
    null-vect-t
    cons-vect-tt
) {
    ty : type
    length : nat-t
}

null-vect-t = conj {
    ty : type
    length : nat-t
    length = zero-c
}

cons-vect-t = conj {
    ty : type
    length : nat-t
    car : ty
    cdr : vect-t (ty n)
    length = succ-c (n)
}
