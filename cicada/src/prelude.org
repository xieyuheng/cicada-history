#+property: tangle prelude.cic
#+title: prelude

* bool

*** bool-t

    #+begin_src cicada
    bool-t : type-tt
    bool-t = disj (true-t false-t) {}

    true-t : type-tt
    true-t = conj {}

    false-t : type-tt
    false-t = conj {}
    #+end_src

* nat

*** nat-t

    #+begin_src cicada
    nat-t : type-tt
    nat-t = disj (zero-t succ-t) {}

    zero-t : type-tt
    zero-t = conj {}

    succ-t : type-tt
    succ-t = conj {
      prev : nat-t
    }
    #+end_src

*** nat-even-t

    #+begin_src cicada
    nat-even-t : type-tt
    nat-even-t = disj (zero-even-t even-plus-two-even-t) {
      nat : nat-t
    }

    zero-even-t : type-tt
    zero-even-t = conj {
      nat : nat-t
      nat = zero-c
    }

    even-plus-two-even-t : type-tt
    even-plus-two-even-t = conj {
      nat : nat-t
      prev : nat-even-t (m)
      nat = succ-c (succ-c (m))
    }
    #+end_src

* list

*** list-t

    #+begin_src cicada
    list-t : type-tt
    list-t = disj (
      null-t
      cons-t
    ) {
      t : type-tt
    }

    null-t : type-tt
    null-t = conj {
      t : type-tt
    }

    cons-t : type-tt
    cons-t = conj {
      t : type-tt
      car : t
      cdr : list-t (t)
    }
    #+end_src

*** list-length-t

    #+begin_src cicada
    list-length-t : type-tt
    list-length-t = disj (
      zero-length-t
      succ-length-t
    ) {
      list : list-t (t)
      length : nat-t
    }

    zero-length-t : type-tt
    zero-length-t = conj {
      list : list-t (t)
      list = null-c
      length : nat-t
      length = zero-c
    }

    succ-length-t : type-tt
    succ-length-t = conj {
      list : list-t (t)
      list = cons-c (x l)
      length : nat-t
      length = succ-c (n)
      prev : list-length-t (l n)
    }
    #+end_src

*** list-append-t

    #+begin_src cicada
    list-append-t : type-tt
    list-append-t = disj (
      zero-append-t
      succ-append-t
    ) {
      [ante succ result] : list-t (t)
    }

    zero-append-t : type-tt
    zero-append-t = conj {
      [ante succ result] : list-t (t)
      ante = null-c
      result = succ
    }

    succ-append-t : type-tt
    succ-append-t = conj {
      [ante succ result] : list-t (t)
      prev : list-append-t (cdr succ result-cdr)
      ante = cons-c (car cdr)
      result = cons-c (car result-cdr)
    }
    #+end_src

* vect

*** vect-t

    #+begin_src cicada
    vect-t : type-tt
    vect-t = disj (null-vect-t cons-vect-tt) {
      t : type-tt
      length : nat-t
    }

    null-vect-t : type-tt
    null-vect-t = conj {
      t : type-tt
      length : nat-t
      length = zero-c
    }

    cons-vect-t : type-tt
    cons-vect-t = conj {
      t : type-tt
      length : nat-t
      car : t
      cdr : vect-t (t n)
      length = succ-c (n)
    }
    #+end_src
