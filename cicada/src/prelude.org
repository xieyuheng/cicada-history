#+property: tangle prelude.cic
#+title: prelude

* bool

*** bool-t

    #+begin_src cicada
    bool-t = disj (
        true-t
        false-t
    ) {}

    true-t = conj {}

    false-t = conj {}
    #+end_src

* nat

*** nat-t

    #+begin_src cicada
    nat-t = disj (
        zero-t
        succ-t
    ) {}

    zero-t = conj {}

    succ-t = conj {
        prev : nat-t
    }
    #+end_src

*** nat-even-t

    #+begin_src cicada
    nat-even-t = disj (
        zero-even-t
        even-plus-two-even-t
    ) {
        nat : nat-t
    }

    zero-even-t = conj {
        nat : nat-t
        nat = zero-c
    }

    even-plus-two-even-t = conj {
        nat : nat-t
        prev : nat-even-t (:m)
        nat = succ-c (succ-c (:m))
    }
    #+end_src

* list

*** list-t

    #+begin_src cicada
    list-t = disj (
        null-t
        cons-t
    ) {
        t : type
    }

    null-t = conj {
        t : type
    }

    cons-t = conj {
        t : type
        car : t
        cdr : list-t (t)
    }
    #+end_src

*** list-length-t

    #+begin_src cicada
    list-length-t = disj (
        zero-length-t
        succ-length-t
    ) {
        list : list-t (:t)
        length : nat-t
    }

    zero-length-t = conj {
        list : list-t (:t)
        length : nat-t
        list = null-c
        length = zero-c
    }

    succ-length-t = conj {
        list : list-t (:t)
        length : nat-t
        prev : list-length-t (:l :n)
        list = cons-c (:x :l)
        length = succ-c (:n)
    }
    #+end_src

*** list-append-t

    #+begin_src cicada
    list-append-t = disj (
        zero-append-t
        succ-append-t
    ) {
        ante : list-t (:t)
        succ : list-t (:t)
        result : list-t (:t)
    }

    zero-append-t = conj {
        ante : list-t (:t)
        succ : list-t (:t)
        result : list-t (:t)
        ante = null-c
        result = succ
    }

    succ-append-t = conj {
        ante : list-t (:t)
        succ : list-t (:t)
        result : list-t (:t)
        prev : list-append-t (:cdr succ :result-cdr)
        ante = cons-c (:car :cdr)
        result = cons-c (:car :result-cdr)
    }
    #+end_src

* vect

*** vect-t

    #+begin_src cicada
    vect-t = disj (
        null-vect-t
        cons-vect-t
    ) {
        t : type
        length : nat-t
    }

    null-vect-t = conj {
        t : type
        length : nat-t
        length = zero-c
    }

    cons-vect-t = conj {
        t : type
        length : nat-t
        car : t
        cdr : vect-t (t :n)
        length = succ-c (:n)
    }
    #+end_src
