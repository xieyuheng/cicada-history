#+title: class

* [todo-list]

*** no implicit :local

*** zip example

*** syntax for inheritance

*** learn more about haskell type-class

*** use category theory to test type-class

    - group theory

* [note]

*** subtype relation between classes

    - c1 < c2
      if c1 is more special then c2
      if c1 has more interface functions than c2

*** overload add to different types

    - we can also define something like
      (+class add-tc < (-> type-tt type-tt -- type-tt))
      to add number to array

* functor-tc

  #+begin_src cicada
  (+class functor-tc < (-> type-tt -- type-tt)
    (+sig map
      : (-> functor-t :: functor-tc
            t1 :: type-tt
            t2 :: type-tt
            t1 functor-t, (-> t1 -- t2), -- t2 functor-t)))
  #+end_src

* list-t : functor-tc

  #+begin_src cicada
  (+imp list-t : functor-tc
    (+fun map
      : (-> t1 :: type-tt
            t2 :: type-tt
            l : [t1 list-t]
            fun : (-> t1 -- t2)
         -- t2 list-t)
      (case l
        (null-t null-c)
        (cons-t l.car fun l.cdr {fun} recur cons-c))))
  #+end_src

* monad-tc

  #+begin_src cicada
  (+class monad-tc < (-> type-tt -- type-tt)
    (+sig return
      : (-> monad-t :: monad-tc
            t :: type-tt
            t -- t monad-t))
    (+sig bind
      : (-> monad-t :: monad-tc
            t1 :: type-tt
            t2 :: type-tt
            t1 monad-t, (-> t1 -- t2 monad-t) -- t2 monad-t)))
  #+end_src

* maybe

*** maybe-t

    #+begin_src cicada
    (+union maybe-t : (-> type : type-tt -- type-tt)
      (-> -- type none-t)
      (-> value : type -- type just-t))
    #+end_src

*** maybe-t : monad-tc

    #+begin_src cicada
    (+imp maybe-t : monad-tc
      (+fun return : (-> value : :t -- :t maybe-t)
        value just-c)
      (+fun bind
        : (-> maybe : [:t1 maybe-t]
              fun : (-> :t1 -- :t2 maybe-t)
           -- :t2 maybe-t)
        (case maybe
          (none-t none-c)
          (just-t :m.value fun))))
    #+end_src

* state

*** state-t

    #+begin_src cicada
    (+type state-t : (-> type-tt type-tt -- type-tt)
      (-> fun : (-> :s-t -- :s-t :v-t)
       -- :s-t :v-t state-t))
    #+end_src

*** {:v-t state-t} : monad-tc

    #+begin_src cicada
    (+imp {:v-t state-t} : monad-tc
      (+fun return : (-> value : :v-t -- :s-t :v-t state-t)
        {value} state-c)
      (+fun bind
        : (-> state : [:s-t :v1-t state-t]
              fun : (-> :v1-t -- :s-t :v2-t state-t)
           -- :s-t :v2-t state-t)
        {state.fun fun .fun apply} state-c))
    #+end_src

* tree

*** tree-t

    #+begin_src cicada
    (+union tree-t : (-> type-tt -- type-tt)
      (-> value : :t -- :t leaf-t)
      (-> left : :t.right : :t -- :t node-t))
    #+end_src

*** tree-t : functor-tc

    #+begin_src cicada
    (+imp tree-t : functor-tc
      (+fun map
        : (-> tree : [:t1 tree-t]
              fun : (-> :t1 -- :t2)
           -- :t2 tree-t)
        (case tree
          (leaf-t tree.value fun leaf-c)
          (node-t
            tree.left {fun} recur
            tree.right {fun} recur node-c))))
    #+end_src

*** tree-zip

    #+begin_src cicada
    (+fun tree-zip
      : ())
    #+end_src

*** tree-numbering

    #+begin_src cicada
    (+fun tree-numbering
      : (-> nat-t tree : [:t tree-t]
         -- nat-t nat-t tree-t)
      (case tree
        (leaf-t dup inc swap leaf-c)
        (node-t
          tree.left recur (let left)
          tree.right recur (let right)
          left right node-c)))
    #+end_src

*** tree-numbering-curry

    #+begin_src cicada
    (+fun tree-numbering-curry
      : (-> tree : [:t tree-t]
         -- (-> nat-t
             -- nat-t tree-t))
      (case tree
        (leaf-t {dup inc swap leaf-c})
        (node-t {tree.left recur apply (let left)
                 tree.right recur apply (let right)
                 left right node-c})))
    #+end_src

*** tree-numbering-state

    #+begin_src cicada
    (+fun tree-numbering-state
      : (-> tree : [:t tree-t]
         -- nat-t tree-t state-t)
      (case tree
        (leaf-t {dup inc swap leaf} state-c)
        (node-t (do
                  left = [tree.left recur]
                  right = [tree.right recur]
                  [left right node-c]))))
    #+end_src

*** [note] macro expansion of (do)

    #+begin_src cicada
    (do
      left = [tree.left recur]
      right = [tree.right recur]
      [left right node])

    ;; =expand-to=>

    (begin
      [tree.left recur]
      {(let left)
       [tree.right recur]
       {(let right)
        [left right node]
        return}
       bind}
      bind)
    #+end_src
