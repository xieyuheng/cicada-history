#+title: logic

* [note]

*** unification

***** what to unify ?

      - in cicada
        <term> := <type-term>, <union-term>, <data-term>
        --- (data <hypo>), (type <hypo>)
        --- <trunk>
        <type-term>  := (<type-constructor> <term> ...)
        <union-term> := (<union-constructor> <term> ...)
        <data-term>  := (<data-constructor> <term> ...)
        <trunk> := function application to be reduced

        data-bind-dict -- <hypo> to data <term>
        type-bind-dict -- <hypo> to type <term>

        <trunk> will be formed,
        when among arguments of a function application
        there is a <hypo> that is not bound to data
        or there is a non-reduce-able <trunk>

      - in logic
        <term> := <predicate-term>, <var>, <constant>
        <predicate-term> := (<predicate-symbol> <term> ...)

***** feature structures

      - <var> with two fields type and data,
        can be viewed as feature structures
        in unification theory

*** vector vs list

    - vector and list have the same data-constructor shape

    - it is *not* true that
      every function can be defined for vector
      can also be defined for list

      - for example zip can be defined for vector of same length

      - when defining zip for vector
        more informations in type
        can help to rule out some not meaningful cases

      list -> list
      vector -> vector
      can *not* be composed to
      list -> vector

    - it is true that
      every function can be defined for list
      can also be defined for vector

      - by dropping the length information

      vector -> vector
      list -> list
      can be composed
      vector -> list

    - vector can be viewed as subtype of list
      we can assert so
      and use this subtype relation to reuse functions

      - in some case [when namings are so different]
        we also need to assert relation between
        fields of type and data-constructors

* list processing

*** list-t

    #+begin_src cicada
    (+union list-t : (-> type : type-tt -- type-tt)
      (-> -- type null-t)
      (-> car : type
          cdr : type list-t
       -- type cons-t))
    #+end_src

*** append-o

    #+begin_src cicada
    (+relation append-o
      : )
    #+end_src

* number theory

*** int-q

    #+begin_src cicada

    #+end_src

*** mod-t

    #+begin_src cicada
    (+union mod-t
      : (->
         -- )
      (-> ))
    #+end_src

*** gcd-t

    #+begin_src cicada
    (+union gcd-t
      : (-> x : int-q
            y : int-q
            d : int-q
         -- type-tt)
      (-> -- x zero-c x zero-gcd-t)
      (-> gcd : x y d gcd-t
          mod : x y z mod-t
       -- y z d mod-gcd-t))
    #+end_src
