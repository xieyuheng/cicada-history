#+title: quotient

* [note]

*** standard homomorphism

    - we need to be able to say nat-t < int-q
      a standard homomorphism from nat-t to int-q

*** abstract quotient-type

    - quotient-type might be applied to type class too
      or not ?

*** representation of quotient-type

    - a representation of a quotient-type
      is another type that is iso to the quotient-type.

*** quotient-type

    - to use define a quotient-type is to to re-implement 'eq-p'.

      - or, generally,
        to re-implement interface functions
        of type or trait

*** functions are all single value -- to be well defined

    - when define a function from a quotient-type to a type
      we must also prove same element of the quotient-type
      are mapped to the same result

* int-q

  #+begin_src cicada
  (+quotient int-q : type-tt
    (-> left : nat-t
        right : nat-t
     -- int-q)
    (+fun eq-p : (-> [x y] : int-q -- bool-t)
      x.left x.right sub
      y.left y.right sub
      eq-p))

  (note
    ;; if we view type-tt as a trait,
    ;; eq-p will be its only interface function.

    (+trait type-tc < type-tt
      eq-p : (-> [x y] : type-tc -- bool-t))

    (+impl int-q : type-tc
      (+fun eq-p : (-> [x y] : int-q -- bool-t)
        x.left x.right sub
        y.left y.right sub
        eq-p)))
  #+end_src

* fraction-q

  #+begin_src cicada
  (+quotient fraction-q : type-tt
    (-> up : int-q
        down : int-q
     -- fraction-q)
    (+fun eq-p : (-> [x y] : fraction-q -- bool-t)
      x.up y.down mul
      y.up x.down mul
      eq-p))
  #+end_src
