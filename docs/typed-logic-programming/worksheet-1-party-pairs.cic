// We are organising a party.
// We need to decide whether a pair of people will dance together.
// The single rule for dancing together is that
// the pair will consist of a male and a female.

// We begin by define two `male-t` and `female-t` as two types
// and add some subtypes for each of them

male-t = disj (
    bertram-t
    percival-t
) {}

bertram-t = conj {}
percival-t = conj {}

female-t = disj (
    lucinda-t
    camilla-t
) {}

lucinda-t = conj {}
camilla-t = conj {}

// Next, the rule for a pair
// to construct an element of type `pair-t`
//   we need a male of type `male-t`
//   and a female of type `female-t`

pair-t = conj {
    male : male-t
    female : female-t
}

// There are three interface commands
//   `search!` -- theorem proving
//   `query!` -- logic programming
//   `assert!` & `assert-not!` -- testing

// `search!` -- to search data of given type

search! (4) {
    pair-t (:m :f)
}

search! (1) {
    pair-t (bertram-c lucinda-c)
}

// `query!` -- to find solutions (substitutions)
//   of given proposition

query! (4) {
    pair-t (:m :f)
}

query! (2) {
    pair-t (bertram-c :f)
}

// `assert!` -- to assert that
//     there is at least one data of given type
//     there is at least one substitution of given proposition

assert! {
    pair-t (bertram-c :f)
}

// `assert-not!` -- to assert that
//   there are no data of given type
//   there are no substitution of given proposition

assert-not! {
    pair-t (lucinda-c bertram-c)
}

assert-not! {
    pair-t (:x :x)
}
