#+title: union

* [note]

*** (+union)

    - (+union) define relation between
      an union-constructor
      and a list of type-constructors for the union's subtypes

    - this relation is more generate than subtype relation between types
      because union-constructor or type-constructor is not of type type-tt
      but of function type in general

    - the condition of being union-constructor and type-constructor
      can be loose
      because bodies can be viewed as type-constructors

      #+begin_src cicada
      node-t : (-> name-t -- type-tt)
      path-t : (-> name-t, name-t -- type-tt)
      node-t < [dup path-t]

      (+union path-t : (-> begin : name-t, ending : name-t -- type-tt)
        node-t
        edge-t
        composed-path-t)

      string-t < sexp-t
      [string-t list-t] < sexp-t

      (+union sexp-t
        string-t
        [string-t list-t])
      #+end_src

    - but an union can not have more information than its subtype

      #+begin_src cicada
      null-t : type-tt
      list-t : (-> type : type-tt -- type-tt)
      null-t < [type list-t]
      ;; the line above is invalid
      ;;   because the information of type in list-t
      ;;   is not in list-t's subtype null-t
      #+end_src

    - we need the following information from (+union)
      - subtype relation
      - for each union
        we need to know all the ways
        of constructing data of subtype of this union

*** (case)

    - (case) dispatches over a value of union-type or sumtype
      to type-constructors
      or bodies that can be viewed as type-constructors

    - a case-clause refines an union

*** (|) -- sumtype

    - (|) for literal sumtype

      #+begin_src cicada
      (| false-t
         [obj-t true-t])
      #+end_src

    - different subtypes of a sumtype
      can have different information
