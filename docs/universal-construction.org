#+title: universal construction

* [todo-stack]

*** find a way to implement [special] universal construction

*** generic universal construction

* [discuss]

  - x -
    universal construction is not constructive
    because it states something about the whole space
    a category-product can not be constructed

    we can not define a predicate to test
    whether an object is the category-product of a pair of objects
    instead we have to proof each judgment of each use of predicate

    when implementing the instance of product closed category
    we ensure that each pair of objects have category-product
    we are actually doing a generic proof
    or say, we are writing a function
    to generate proofs for each use predicate

  - k -
    note that, in general we can not prove
    an object is the category-product of a pair of objects
    because for general objects we have no informations to do that

  - x -
    but
    a monad is just a monoid-object in the monoidal-category of endofunctors,
    where in the monoidal-category tensor-product is functor composition,
    thus a special endofunctor, with two morphisms `join` and `pure`.

    thus
    a product is just a object in a category
    with two morphisms `fst` and `snd`
    for a instance of category-ct
    we might have informations to prove it

    just like
    when asserting a type constructor is monad
    we are not doing it for general monoidal-category of endofunctors
    we are doing it for a instance of such monoidal-category
    namely the category of types
    where arrows are functions
    and eqv between arrows is fun-eqv-t
