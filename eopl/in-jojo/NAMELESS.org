#+property: tangle NAMELESS.cs
#+title: NAMELESS

* intro

  - We now implement the lexical-address analysis.
    We write a procedure 'tran'
    that takes a exp
    and removes all the variables from the declarations,
    and replaces every variable reference by its lexical depth.

  - For example, the program :

  #+begin_src cicada
  (note
    (let :x 37
      (proc :y
        (let :z (diff :y :x)
          (diff :x :y)))))
  #+end_src

  - will be translated to :

  #+begin_src cicada
  (note
    (let-nameless 37
      (proc-nameless
        (let-nameless (diff (var-nameless 0) (var-nameless 1))
          (diff (var-nameless 2) (var-nameless 1))))))
  #+end_src

  - We then write a new version of 'program-eval'
    that will find the value of such a nameless program,
    without putting variables in the environment.

* the translator

  - We are writing a translator,
    so we need to know the source language and the target language.

  - the source language is the exp of PROC.

  - the target language is called nameless-exp,
    which add some new exp constructors to it,
    and remove some old exp constructors.

* exp

  #+begin_src cicada
  (note program = exp)

  (note exp
    = <const-exp> -- 123
    | <zero?-exp> -- (diff ... ...)
    | <if-exp>    -- (if ... ... ...)
    | <diff-exp>  -- (zero? ...)

    | <var-exp>   -- :var
    | <let-exp>   -- (let :var ... ...)
    | <proc-exp>  -- (proc :var ...)

    | <call-exp>  -- (call ... ...))

  (+data <const-exp> .num)
  (+data <zero?-exp> .exp1)
  (+data <if-exp>    .exp1 .exp2 .exp3)
  (+data <diff-exp>  .exp1 .exp2)
  (+data <var-exp>   .var)
  (+data <let-exp>   .var .exp1 .body)

  (+data <proc-exp>  .var .body)
  (+data <call-exp>  .rator .rand)
  #+end_src

* nameless-exp

  #+begin_src cicada
  (note nameless-exp
    = <const-exp> -- 123
    | <zero?-exp> -- (diff ... ...)
    | <if-exp>    -- (if ... ... ...)
    | <diff-exp>  -- (zero? ...)

    | <call-exp>  -- (call ... ...)

    | <var-nameless-exp> -- (var-nameless :n)
    | <let-nameless-exp> -- (let-nameless ... ...)
    | <proc-nameless-exp> -- (proc-nameless ...))

  (+data <var-nameless-exp> .num)
  (+data <let-nameless-exp> .exp1 .body)
  (+data <proc-nameless-exp> .body)
  #+end_src

* static-env

*** [note]

    - To calculate the lexical address of any variable reference,
      we need to know the scopes in which it is enclosed.

    - This is context information
      is passed as auxiliary argument,
      called static environment.

    - The static environment will be a list of variables,
      representing the scopes within which
      the current expression lies.

    - The variable declared in the innermost scope
      will be the first element of the list.

    - when we translate the last line of the example :

    #+begin_src cicada
    (note
      (let :x 37
        (proc :y
          (let :z (diff :y :x)
            (diff :x :y)))))
    #+end_src

    - the static environment should be :
      (:z :y :x)

    - So looking up a variable in the static environment
      means finding its position in the static environment,
      which gives a lexical address.

    - looking up :x will give 2,
      looking up :y will give 1,
      looking up :z will give 0.

*** static-env

    #+begin_src cicada
    (+data <null-static-env>)
    (+data <cons-static-env> .rest .var)
    #+end_src

*** static-env-apply

    #+begin_src cicada
    (+jojo static-env-apply
      (-> :var :static-env -- lexical-address)
      (case :static-env

        <null-static-env>
        ["- static-env-apply fail" p nl
         "  can not find var : " p :var p nl
         error]

        <cons-static-env>
        (if [:static-env .var :var equal?]
          0
          [:var :static-env .rest static-env-apply inc])))
    #+end_src

* tran

  - We are trying to translate an expression
    which is sitting inside the declarations
    represented by static-env.

  - To do this, we recursively copy the tree,
    while :

    1. <var-exp> -> <var-nameless-exp>
       with the right lexical address,
       which we compute by calling apply-senv.

    2. <let-exp> -> <let-nameless-exp>
       the body with be translated in extended static-env.

    3. <proc-exp> -> <proc-nameless-exp>
       the body with be translated in extended static-env.

  #+begin_src cicada
  (+jojo tran (-> :exp :static-env -- nameless-exp)
    (case :exp
      <const-exp> :exp
      <zero?-exp> [:exp .exp1 :static-env tran zero?-exp]
      <if-exp>    [:exp .exp1 :static-env tran
                   :exp .exp2 :static-env tran
                   :exp .exp3 :static-env tran if-exp]
      <diff-exp>  [:exp .exp1 :static-env tran
                   :exp .exp2 :static-env tran diff-exp]
      <call-exp>  [:exp .rator :static-env tran
                   :exp .rand  :static-env tran call-exp]

      <var-exp>   [:exp .var
                   :static-env static-env-apply
                   var-nameless-exp]
      <let-exp>   [:static-env, :exp .var, cons-static-env
                   :new-static-env!
                   :exp .exp1 :static-env tran
                   :exp .body :new-static-env tran
                   let-nameless-exp]
      <proc-exp>  [:static-env, :exp .var, cons-static-env
                   :new-static-env!
                   :exp .body :new-static-env tran
                   proc-nameless-exp]))
  #+end_src

* nameless-env

*** [note]

    - our interpreter takes advantage of the predictions
      of the lexical-address analyzer
      to avoid explicitly searching for variables at run time.

    - since there are no more variables in our programs,
      we won’t be able to put variables in our environments,
      but since we know exactly where to look in each environment,
      we don’t need them!

    - at run time,
      instead of having full-fledged environments,
      we will have nameless environments.

*** nameless-env

    #+begin_src cicada
    (+data <null-nameless-env>)
    (+data <cons-nameless-env> .rest .val)
    #+end_src

*** nameless-env-apply

    #+begin_src cicada
    (+jojo nameless-env-apply
      (-> :lexical-address :nameless-env -- denval)
      (cond [:nameless-env null-nameless-env?]
            ["- nameless-env-apply fail" p nl
             "  lexical-address greater then" p nl
             "  length of nameless-env" p nl
             error]
            [:lexical-address 0 eq?] [:nameless-env .val]
            else [:lexical-address dec
                  :nameless-env .rest nameless-env-apply]))
    #+end_src

* expval

  #+begin_src cicada
  (note denval = expval)

  (note expval
    = <num-val>
    | <bool-val>
    | <proc-val>)

  (+data <num-val>  .num)
  (+data <bool-val> .bool)

  (+data <proc-val> .proc)
  #+end_src

* proc

  - The revised specification for procedures
    is just the old one with the variable name removed.

  #+begin_src cicada
  (+data <proc> .body .saved-env)

  (+jojo proc-apply (-> :val :proc -- expval)
    :proc .saved-env :val cons-nameless-env
    :proc .body swap eval)
  #+end_src

* eval

  - now
    :exp is nameless-exp
    :env is nameless-env

  #+begin_src cicada
  (+jojo eval (-> :exp :env -- expval)
    (case :exp
      <const-exp> [:exp .num num-val]
      <zero?-exp> [:exp .exp1 :env eval .num 0 equal? bool-val]
      <if-exp>    (if [:exp .exp1 :env eval .bool]
                      [:exp .exp2 :env eval]
                      [:exp .exp3 :env eval])
      <diff-exp>  [:exp .exp1 :env eval .num
                   :exp .exp2 :env eval .num sub num-val]
      <call-exp>  [:exp .rator :env eval .proc :proc!
                   :exp .rand  :env eval :arg!
                   :arg :proc proc-apply]

      <var-nameless-exp> [:exp .num :env nameless-env-apply]
      <let-nameless-exp> [:env
                          :exp .exp1 :env eval
                          cons-nameless-env :new-env!
                          :exp .body :new-env eval]
      <proc-nameless-exp> [:exp .body :env proc proc-val]))
  #+end_src

* program

  #+begin_src cicada
  (+jojo init-static-env
    null-static-env
    ':x cons-static-env
    ':v cons-static-env
    ':i cons-static-env)

  (+jojo init-nameless-env
    null-nameless-env
    10 num-val cons-nameless-env
    5  num-val cons-nameless-env
    1  num-val cons-nameless-env)

  (+jojo program-eval (-> :program -- expval)
    :program init-nameless-env eval)
  #+end_src

* parse

  #+begin_src cicada
  (+jojo parse (-> :sexp -- exp)
    (cond
      [:sexp string?] [:sexp parse/string]
      [:sexp cons?] [:sexp parse/cons]
      else  ["- parse fail" p nl
             "  can not parse sexp : " p
             :sexp sexp-print nl
             error]))

  (+jojo parse/string (-> :string -- exp)
    (cond
      [:string int-string?]   [:string string->int const-exp]
      [:string local-string?] [:string var-exp]
      else ["- parse/string fail" p nl
            "  can not parse string : " p :string p nl
            error]))

  (+jojo parse/cons (-> :sexp -- exp)
    :sexp .car :key!
    :sexp .cdr :body!
    (cond [:key 'zero? eq?] [:body parse/spread zero?-exp]
          [:key 'if eq?]    [:body parse/spread if-exp]
          [:key 'diff eq?]  [:body parse/spread diff-exp]
          [:key 'let eq?]   [:body .car :body
                             .cdr parse/spread let-exp]

          [:key 'proc eq?]  [:body .car :body
                             .cdr parse/spread proc-exp]
          [:key 'call eq?]  [:body parse/spread call-exp]))

  (+jojo parse/spread {parse} list-map list-spread)
  #+end_src

* interface

  #+begin_src cicada
  (+jojo NAMELESS (-> :body --)
    :body {parse
           init-static-env tran
           program-eval
           expval-print nl}
    list-for-each
    '(begin))

  (+jojo expval-print (-> :expval)
    (case :expval
      <num-val>  [:expval .num p]
      <bool-val> [:expval .bool p]))
  #+end_src

* [test]

  #+begin_src cicada
  (NAMELESS
   1 2 3
   (diff 2 1)
   (diff 3 1)
   (let :y 5 (diff :x :y))
   (zero? 1)
   (zero? 0)
   (let :y (diff :x 3)
     (if (zero? :y) 0 666))

   (let :x 200
     (let :f (proc :z (diff :z :x) )
       (let :x 100
         (let :g (proc :z (diff :z :x))
           (diff (call :f 1)
             (call :g 1)))))))

  (NAMELESS
   (let :makemult
     (proc :maker
       (proc :x (if (zero? :x) 0
                  (diff (call (call :maker :maker)
                          (diff :x 1))
                    -4))))
     (let :times4
       (proc :x
         (call (call :makemult :makemult) :x))
       (call :times4 3))))
  #+end_src

* exercise

  - nameless-letrec
