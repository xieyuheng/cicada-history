#+title: Communicating Sequential Processes

- by C. A. R. Hoare

* 1 Processes

*** 1.1  Introduction

    - the word 'process' stand for
      the behaviour pattern of an object,
      insofar as it can be described
      in terms of the limited set of events
      selected as its alphabet.

***** 1.1.1 prefix

      #+begin_src jojo :tangle no
      (note
        a simple vending machine
        that successfully serves two customers before breaking)

      (- coin choc coin choc STOP)

      (note syntax
        (- Event ... Process))
      #+end_src

***** 1.1.2 recursion

      - This method of self-referential recursive definition of processes
        will work only if the right-hand side of the equation
        starts with at least one event prefixed
        to all recursive occurrences of the process name.

      #+begin_src jojo :tangle no
      (+jojo CLOCK (- tick CLOCK))

      (note the simple vending machine)
      (+jojo VMS (- coin choc VMS))

      (note syntax
        (proc ...) as a marking language)
      (+jojo VMS (proc P (- coin choc P)))

      (note gives change for 5p)
      (+jojo CH5A (- in5p out2p out1p out2p CH5A))
      (+jojo CH5B (- in5p out1p out1p out1p out2p CH5B))
      #+end_src

***** 1.1.3 choice

      #+begin_src jojo :tangle no
      (note
        a machine which offers a choice
        of two combinations of change for 5p)
      (+jojo CH5C
        (- in5p (| out1p (- out1p out1p out2p CH5C)
                   out2p (- out1p out2p CH5C))))
      (note
        a machine that serves either chocolate or toffee
        on each transaction)
      (+jojo VMCT
        (- coin (| choc VMCT
                   toffee VMCT)))

      (note
        a more complicated vending machine,
        which offers a choice of coins
        and a choice of goods and change)
      (note
        like many complicated machines,
        this has a design flaw.
        it is often easier to change the user manual
        than correct the design,
        so we write a notice on the machine)
      (+jojo VMC
        (note WARNING
          do not insert three pennies in a row)
        (| in2p (| large VMC
                   small (- out1p VMC))
           in1p (| small VMC
                   in1p (| large VMC
                           in1p STOP))))

      (note
        a copying process engages in the following events
        in.0  -- input of zero on its input channel
        in.1  -- input of one on its input channel
        out.0 -- output of zero on its output channel
        out.1 -- output of one on its output channel)
      (+jojo COPYBIT
        (| in.0 (- out.0 COPYBIT)
           in.1 (- out.1 COPYBIT)))

      (note syntax
        (| Event Process
           ... ...))

      (note
        (|) == STOP)
      #+end_src

***** (choice) -- general choice

      #+begin_src jojo :tangle no
      (note a more general syntax
        (choice Event List
          Process))
      #+end_src

***** 1.1.4 mutual recursion

      #+begin_src jojo :tangle no
      (+jojo CT (-> :n -- Process)
        (cond [:n 0 eq?]
              (| up [1 CT]
                 around [0 CT])
              else
              (| up [:n inc CT]
                 down [:n dec CT])))
      #+end_src

*** 1.2  Pictures

*** 1.3  Laws

*** 1.4  Implementation of processes

***** type

      #+begin_src jojo :tangle process.jo
      (note
        Event == String
        Process == (-> Event -- Process))

      (note
        thus a process is a closure in jojo
        while the special process STOP simply returns a 'bleep)
      #+end_src

***** STOP

      #+begin_src jojo :tangle process.jo
      (+jojo STOP {drop 'bleep})
      #+end_src

***** prefix

      #+begin_src jojo :tangle process.jo
      (+jojo prefix (-> :event :process -- Process)
        {(-> :x -- Process)
         (if [:x :event eq?]
             :process
             'bleep)})
      #+end_src

***** dict-choice

      #+begin_src jojo :tangle process.jo
      (+jojo dict-choice (-> :dict -- Process)
        {(-> :event -- Process)
         (if [:dict :event dict-find]
           []
           'bleep)})
      #+end_src

***** menu

      - gives a list of all those symbols
        of a which can occur as the first event
        in the life of a process

      #+begin_src jojo :tangle process.jo
      (+jojo menu (-> :event-list :process -- Event List)
        (cond [:event-list null?] null

              [:event-list .car :process apply 'bleep eq?]
              [:event-list .cdr :process menu]

              else [:event-list .car
                    :event-list .cdr :process menu
                    cons]))
      #+end_src

***** interact

      #+begin_src jojo :tangle process.jo
      (import sys)

      (+jojo readline sys .stdin -1 swap .readline)

      (+jojo read-event
        readline code-scan :string-vect!
        (if [:string-vect vect-length 0 eq?]
          read-event
          [:string-vect 0 vect-ref]))

      (+jojo interact (-> :event-list :process --)
        :event-list :process menu p nl
        read-event :event!
        (when [:event 'end eq? not]
          :event :process apply :next!
          (cond [:next 'bleep eq?]
                ['bleep p nl :event-list :process interact]
                else [:event-list :next interact])))
      #+end_src

***** (-)

      #+begin_src jojo :tangle process.jo
      (+jojo - (-> :body -- Sexp)
        (cond [:body null?]
              ["- (-) syntax error" p nl
               "  body of (-) can not be null" p nl
               error]
              [:body.cdr null?]
              `{(@ :body.car) apply}
              else
              `[(quote (@ :body.car))
                (- (@ :body.cdr list-spread))
                prefix]))

      (note
        (+jojo VMS
          (- coin choc VMS))
        ==>
        (+jojo VMS
          'coin 'choc {VMS apply}
          prefix prefix))
      #+end_src

***** (|)

      #+begin_src jojo :tangle process.jo
      (+jojo | (-> :body -- Sexp)
        `(begin
           (dict (@ :body choice-recur))
           dict-choice))

      (+jojo choice-recur (-> :body -- Sexp)
        (cond [:body null?] `(begin)
              else `(begin
                      (quote (@ :body.car))
                      {(@ :body.cdr.car) apply}
                      (@ :body.cdr.cdr choice-recur))))

      (note
        (+jojo CT (-> :n -- Process)
          (cond [:n 0 eq?]
                (| up [1 CT]
                   around [0 CT])
                else
                (| up [:n inc CT]
                   down [:n dec CT])))
        ==>
        (+jojo CT (-> :n -- Process)
          (cond [:n 0 eq?]
                [(dict
                   'up {1 CT apply}
                   'around {0 CT apply})
                 dict-choice]
                else
                [(dict
                   'up {:n inc CT apply}
                   'down {:n dec CT apply})
                 dict-choice])))
      #+end_src

***** >< (proc) -- marking language

***** >< (choice) -- general choice

***** [test]

      #+begin_src jojo :tangle process.jo
      (+jojo CLOCK (- tick CLOCK))

      (+jojo VMS-alphabet
        '(coin choc))
      (+jojo VMS (- coin choc VMS))

      (+jojo CH5A (- in5p out2p out1p out2p CH5A))

      (+jojo CH5B (- in5p out1p out1p out1p out2p CH5B))

      (+jojo CH5C-alphabet
        '(in5p out1p out2p))
      (+jojo CH5C
        (- in5p (| out1p (- out1p out1p out2p CH5C)
                   out2p (- out1p out2p CH5C))))

      (+jojo VMCT-alphabet
        '(coin choc toffee))
      (+jojo VMCT
        (- coin (| choc VMCT
                   toffee VMCT)))

      (+jojo VMC-alphabet
        '(in1p in2p large small out1p))
      (+jojo VMC
        (note WARNING
          do not insert three pennies in a row)
        (| in2p (| large VMC
                   small (- out1p VMC))
           in1p (| small VMC
                   in1p (| large VMC
                           in1p STOP))))

      (+jojo COPYBIT-alphabet
        '(in.0 out.0 in.1 out.1))
      (+jojo COPYBIT
        (| in.0 (- out.0 COPYBIT)
           in.1 (- out.1 COPYBIT)))

      (+jojo CT-alphabet
        '(up down around))
      (+jojo CT (-> :n -- Process)
        (cond [:n 0 eq?]
              (| up [1 CT]
                 around [0 CT])
              else
              (| up [:n inc CT]
                 down [:n dec CT])))

      (note
        (begin VMS-alphabet VMS interact)
        (begin CH5C-alphabet CH5C interact)
        (begin VMCT-alphabet VMCT interact)
        (begin VMC-alphabet VMC interact)
        (begin CT-alphabet 0 CT interact))
      #+end_src

*** 1.5  Traces

*** 1.6  Operations on traces

***** 1.6.1 Catenation

***** 1.6.2 Restriction

***** 1.6.3 Head and tail

***** 1.6.4 Star

***** 1.6.5 Ordering

***** 1.6.6 Length

*** 1.7  Implementation of traces

*** 1.8  Traces of a process

    - the complete set of all possible traces of a process P
      can be known in advance,
      and we define a function 'traces' to yield that set

***** 1.8.1 Laws

***** 1.8.2 Implementation

      - (: trace-of? (-> Trace Process -- Bool))

***** 1.8.3 After

*** 1.9  More operations on traces

***** 1.9.1 Change of symbol

***** 1.9.2 Catenation

***** 1.9.3 Interleaving

***** 1.9.4 Subscription

***** 1.9.5 Reversal

***** 1.9.6 Selection

***** 1.9.7 Composition

*** 1.10 Specifications

***** 1.10.1 Satisfaction

***** 1.10.2 Proofs

* 2 Concurrency

*** 2.1  Introduction

    - the environment of a process itself
      may be described as a process.

    - This permits investigation of the behaviour
      of a complete system composed from the process
      together with its environment,
      acting and interacting with each other
      as they evolve concurrently.

    - composition of processes.

*** 2.2  Intersection

***** example

      #+begin_src jojo
      (+jojo VMCT
        (- coin (| choc VMCT
                   toffee VMCT)))

      (note greedy customer)
      (+jojo GRCUST
        (| choc GRCUST
           toffee GRCUST
           coin (- choc GRCUST)))

      (note
        (|| VMCT GRCUST)
        ==
        (proc X (- coin choc X)))


      (+jojo VMC
        (note WARNING
          do not insert three pennies in a row)
        (| in2p (| large VMC
                   small (- out1p VMC))
           in1p (| small VMC
                   in1p (| large VMC
                           in1p STOP))))
      (note foolish customer)
      (+jojo FOOLCUST
        (| in2p (- large FOOLCUST)
           in1p (- large FOOLCUST)))

      (note
        (|| VMC FOOLCUST)
        ==
        (proc X (| in2p (- large X)
                   in1p STOP)))
      #+end_src

***** implementation

      #+begin_src jojo
      (+jojo intersect (-> :process1 :process2 -- Process)
        {:z!
         :z :process1 apply :next1!
         :z :process2 apply :next2!
         (cond [:next1 'bleep eq?] ['bleep]
               [:next2 'bleep eq?] ['bleep]
               else [:next1 :next2 intersect])})
      #+end_src

*** 2.3  Concurrency

    - process should not simply be implemented as closure
      since the alphabet of a process is part of it.

    - and alphabet might be infinite
      [such as the set of all integer]

*** 2.4  Pictures

*** 2.5  Example: The Dining Philosophers

*** 2.6  Change of symbol

*** 2.7  Specifications

*** 2.8  Mathematical theory of deterministic processes

* 3 Nondeterminism

*** 3.1  Introduction

*** 3.2  Nondeterministic or

*** 3.3  General choice

*** 3.4  Refusals

*** 3.5  Concealment

*** 3.6  Interleaving

*** 3.7  Specifications

*** 3.8  Divergence

*** 3.9  Mathematical theory of non-deterministic processes

* 4 Communication

*** [note] new syntax

    - from this chapter,
      the syntax need to be re-designed.

    - all channel must be assigned with a type-list.
      #ch for input
      #ch! for output

    - input and output of a channel are the same
      if its type-list is empty.

    #+begin_src jojo
    (+ch #in Int)
    (+ch #out Int)

    (+jojo SQUARE
      #in dup mul #out! SQUARE)
    #+end_src

***** prefix, recursion and choice

      #+begin_src jojo
      (+ch #coin)
      (+ch #choc)

      (+jojo VMS #coin #choc VMS)

      (note
        (+jojo CH5C
          (- in5p (| out1p (- out1p out1p out2p CH5C)
                     out2p (- out1p out2p CH5C)))))

      (+jojo CH5C
        #in5p (| #out1p [#out1p #out1p #out2p CH5C]
                 #out2p [#out1p #out2p CH5C]))

      (+jojo VMCT
        #coin (| #choc VMCT
                 #toffee VMCT))

      (note
        (+jojo COPYBIT
          (| in.0 (- out.0 COPYBIT)
             in.1 (- out.1 COPYBIT))))

      (+jojo COPYBIT
        #in  #out! COPYBIT)

      (note
        (+jojo CT (-> :n -- Process)
          (cond [:n 0 eq?]
                (| up [1 CT]
                   around [0 CT])
                else
                (| up [:n inc CT]
                   down [:n dec CT]))))

      (+jojo CT (-> :n -- Process)
        (cond [:n 0 eq?]
              (| up [1 CT]
                 around [0 CT])
              else
              (| up [:n inc CT]
                 down [:n dec CT])))
      #+end_src

*** 4.1  Introduction

*** 4.2  Input and output

    #+begin_src jojo
    (+ch #in Int)
    (+ch #out Int)

    (+jojo SQUARE
      #in dup mul #out! SQUARE)
    #+end_src

*** 4.3  Communications

*** 4.4  Pipes

*** 4.5  Subordination

* 5 Sequential Processes

*** 5.1  Introduction

*** 5.2  Laws

*** 5.3  Mathematical treatment

*** 5.4  Interrupts

*** 5.5  Assignment

* 6 Shared Resources

*** 6.1  Introduction

*** 6.2  Sharing by interleaving

*** 6.3  Shared storage

*** 6.4  Multiple resources

*** 6.5  Operating systems

*** 6.6  Scheduling

* 7 Discussion

*** 7.1  Introduction

*** 7.2  Shared storage

*** 7.3  Communication

*** 7.4  Mathematical models
