#+property: tangle lib.rs
#+title: lian

* [note]

*** native heap

    - x -
      can we use native heap, instead of using a array as heap ?
      because ad hoc heap is not safe and need a GC

    - k -
      maybe not
      because the VM need to both
      - sharing data
      - and do side effects on data

    - x -
      ok lets just do WAM

* prolog

*** feature

    #+begin_src rust
    #![feature (uniform_paths)]

    #![allow (unused_parens)]
    #![allow (dead_code)]
    #![allow (unused_macros)]
    #![allow (non_camel_case_types)]
    #+end_src

*** use

    #+begin_src rust
    use std::sync::Arc;
    use std::collections::HashMap;
    use uuid::Uuid;
    #+end_src

* Heap

*** Heap

    #+begin_src rust
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq)]
    pub struct Heap {
        memory: Vec <Term>,
    }
    #+end_src

* Term

*** Term

    #+begin_src rust
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq)]
    pub enum Term {
        Struct {
            addr: usize,
        },
        Funtor {
            name: String,
            arity: usize,
        },
        Ref {
            addr: usize,
        },
    }
    #+end_src

* Ins

*** Ins

    #+begin_src rust
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq)]
    pub enum Ins {
        PUT_STRUCTURE {},//f=n Xi
        SET_VARIABLE {},//Xi
        SET_VALUE {},//Xi
    }
    #+end_src

* Query

*** Query

    #+begin_src rust

    #+end_src
