* unification

*** what to unify ?

    - in cicada
      <term> := <type-term>, <union-term>, <data-term>
      --- (data <hypo>), (type <hypo>)
      --- <trunk>
      <type-term>  := (<type-constructor> <term> ...)
      <union-term> := (<union-constructor> <term> ...)
      <data-term>  := (<data-constructor> <term> ...)
      <trunk> := function application to be reduced

      data-bind-dict -- <hypo> to data <term>
      type-bind-dict -- <hypo> to type <term>

      <trunk> will be formed,
      when among arguments of a function application
      there is a <hypo> that is not bound to data
      or there is a non-reduce-able <trunk>

    - in logic
      <term> := <predicate-term>, <var>, <constant>
      <predicate-term> := (<predicate-symbol> <term> ...)

*** feature structures

    - <var> with two fields type and data,
      can be viewed as feature structures
      in unification theory
