#+property: tangle LET.cs
#+title: LET: A Simple Language

* intro

  - We begin by specifying a very simple language,
    which we call LET, after its most interesting feature.

* specifying the expression

  - In this language,
    a program is just an expression.

  - An expression is either
    1. an integer constant,
    2. a difference expression,
    3. a zero-test expression,
    4. a conditional expression,
    5. a variable, or a let expression.

  - example expression :
    (diff 55 (diff x 11))

  #+begin_src cicada
  (note program = exp)
  (note exp
    = <const-exp>
    | <zero?-exp>
    | <if-exp>
    | <diff-exp>
    | <var-exp>
    | <let-exp>)
  #+end_src

* specification of values

  - An important part of the specification
    of any programming language
    is the set of values that the language manipulates.

  - Each language has at least two such sets :
    1. the expressed values
       which are the possible values of expressions,
    2. the denoted values
       which are the values bound to variables.

  - In the languages of this chapter,
    the expressed and denoted values will always be the same.
    They will start out as :
    - ExpVal = Int + Bool
    - DenVal = Int + Bool

  #+begin_src cicada
  (note expval
    = <num-val>
    | <bool-val>)

  (+data <num-val>  .num)
  (+data <bool-val> .bool)
  #+end_src

* environments

  - If we are going to evaluate expressions containing variables,
    we will need to know the value associated with each variable.

    We do this by keeping those values in an environment.

  - An environment is a function
    whose domain is a finite set of variables
    and whose range is the denoted values.

  #+begin_src cicada
  (note env = <null-env> | <cons-env>)

  (+data <null-env>)
  (+data <cons-env> .rest .var .val)

  (+jojo env-apply (-> :var :env -- expval)
    (case :env
      <null-env> ["- env-apply fail" p nl
                  "  can not find var : " p :var p nl
                  error]
      <cons-env> (if [:env .var :var equal?]
                     [:env .val]
                     [:var :env .rest env-apply])))
  #+end_src

* specifying expressions

  #+begin_src cicada
  (+data <const-exp> .num)
  (+data <zero?-exp> .exp1)
  (+data <if-exp>    .exp1 .exp2 .exp3)
  (+data <diff-exp>  .exp1 .exp2)
  (+data <var-exp>   .var)
  (+data <let-exp>   .var .exp1 .body)

  (note
    (= :n const-exp :env eval, :n num-val)
    (= :var var-exp :env eval, :var :env env-apply)
    (= :exp1 :exp2 diff-exp :env eval,
       :exp1 :env eval .num
       :exp2 :env eval .num sub num-val))
  #+end_src

* specifying programs

  - In our language,
    a whole program is just an expression.
    In order to find the value of such an expression,
    we need to specify the values
    of the free variables in the program.

  - So the value of a program
    is just the value of that expression
    in a suitable initial environment.

  - We choose our initial environment to be [i=1,v=5,x=10].

  #+begin_src cicada
  (+jojo init-env
    null-env
    ':x 10 num-val cons-env
    ':v 5  num-val cons-env
    ':i 1  num-val cons-env)

  (+jojo program-eval (-> :program -- expval)
    :program init-env eval)
  #+end_src

* specifying conditionals

  - The next portion of the language
    introduces an interface for booleans in our language.

  - The language has one constructor of booleans -- 'zero?',
    and one observer of booleans -- the if expression.

  #+begin_src cicada
  (note
    (= :exp1 :env eval, :val1)
    ------------------------------------
    (= :exp1 zero?-exp :env eval
       (if [:val1 .num 0 eq?]
         [true  bool-val]
         [false bool-val])))
  #+end_src

  - An if expression is an observer of boolean values.

  #+begin_src cicada
  (note
    (= :exp1 :env eval, :val1)
    ------------------------------------
    (= :exp1 :exp2 :exp3 if-exp :env eval
       (if [:val1 .bool]
         [:exp2 :env eval]
         [:exp3 :env eval])))
  #+end_src

  - Rules of inference like this
    make the intended behavior
    of any individual expression easy to specify,
    but they are not very good
    for displaying a deduction.
    Because deduction by inference rules
    will generate a tree.

  - we can rewrite the rules as equations.
    We can then use substitution of equals for equals
    to display a calculation.

  #+begin_src cicada
  (note
    (= :exp1 :exp2 :exp3 if-exp :env eval
       (if [:exp1 :env eval .bool]
         [:exp2 :env eval]
         [:exp3 :env eval])))
  #+end_src

  - for example :

  #+begin_src cicada
  (note

    null-env ':x 33 cons-env ':y 22 cons-env :env!

    (=
     '(if (zero? (diff :x 11))
        (diff :y 2)
        (diff :y 4))
     parse :env eval

     (if ['(zero? (diff :x 11)) parse :env eval .bool]
       ['(diff :y 2) parse :env eval]
       ['(diff :y 4) parse :env eval])

     (if [false bool-val .bool]
       ['(diff :y 2) parse :env eval]
       ['(diff :y 4) parse :env eval])

     (if false
       ['(diff :y 2) parse :env eval]
       ['(diff :y 4) parse :env eval])

     '(diff :y 4) parse :env eval

     18 num-val))
  #+end_src

* specifying let

  - Next we address the problem of
    creating new variable bindings with a let expression.

  - reference rule :

  #+begin_src cicada
  (note
    (= :exp1 :env eval, :val1)
    ------------------------------------
    (= :var :exp1 :body :env eval,
       :body :env :var :val1 cons-env eval))
  #+end_src

  - equation :

  #+begin_src cicada
  (note
    (= :var :exp1 :body :env eval,
     :env, :var, :exp1 :env eval, cons-env
     :body swap eval))
  #+end_src

* eval

  #+begin_src cicada
  (+jojo eval (-> :exp :env -- expval)
    (case :exp
      <const-exp> [:exp .num  num-val]
      <zero?-exp> [:exp .exp1 :env eval .num 0 equal? bool-val]
      <if-exp>    (if [:exp .exp1 :env eval .bool]
                      [:exp .exp2 :env eval]
                      [:exp .exp3 :env eval])
      <diff-exp>  [:exp .exp1 :env eval .num
                   :exp .exp2 :env eval .num sub num-val]
      <var-exp>   [:exp .var :env env-apply]
      <let-exp>   [:env
                   :exp .var
                   :exp .exp1 :env eval
                   cons-env :new-env!
                   :exp .body :new-env eval]))
  #+end_src

* parse

  #+begin_src cicada
  (note
    123 -- <const-exp>
    (diff ... ...) -- <diff-exp>
    (if ... ... ...) -- <if-exp>
    (zero? ...) -- <zero?-exp>
    :var -- <var-exp>
    (let :var ... ...) -- <let-exp>)

  (+jojo parse (-> :sexp -- exp)
    (cond
      [:sexp string?] [:sexp parse/string]
      [:sexp cons?] [:sexp parse/cons]
      else  ["- parse fail" p nl
             "  can not parse sexp : " p
             :sexp sexp-print nl
             error]))

  (+jojo parse/string (-> :string -- exp)
    (cond
      [:string int-string?]   [:string string->int const-exp]
      [:string local-string?] [:string var-exp]
      else ["- parse/string fail" p nl
            "  can not parse string : " p :string p nl
            error]))

  (+jojo parse/cons (-> :sexp -- exp)
    :sexp .car :key!
    :sexp .cdr :body!
    (cond [:key 'zero? eq?] [:body parse/spread zero?-exp]
          [:key 'if eq?]    [:body parse/spread if-exp]
          [:key 'diff eq?]  [:body parse/spread diff-exp]
          [:key 'let eq?]   [:body .car :body
                             .cdr parse/spread let-exp]))

  (+jojo parse/spread {parse} list-map list-spread)
  #+end_src

* interface

  #+begin_src cicada
  (+jojo LET (-> :body --)
    :body {parse program-eval expval-print nl} list-for-each
    '(begin))

  (+jojo expval-print (-> :expval)
    (case :expval
      <num-val>  [:expval .num p]
      <bool-val> [:expval .bool p]))
  #+end_src

* [test]

  #+begin_src cicada
  (LET
   1 2 3
   (diff 2 1)
   (diff 3 1)
   (let :y 5 (diff :x :y))
   (zero? 1)
   (zero? 0)
   (let :y (diff :x 3)
     (if (zero? :y) 0 666)))
  #+end_src
