#![feature(proc_macro_hygiene)]

use grammar_tech::Grammar;
use grammar_tech::Generation;

use grammar_macro::grammar;

fn sentences (n: usize, grammar: Grammar) {
    let mut generation = Generation::new (grammar, "Start");
    for _ in 0..n {
        assert! (generation.next_sentence () .is_some ());
        // let sentence = generation
        //     .next_sentence ()
        //     .unwrap ();
        // println! ("{}", sentence);
    }
}

#[test]
fn test_next_sentence () {
    sentences (10, grammar! {
        Start -> Sentence;
        Sentence -> Name | List " and " Name;
        Name -> "tom" | "dick" | "harry";
        List -> Name | Name ", " List;
    });

    sentences (10, grammar! {
        Start -> S;
        S -> "abc" | "a" S Q;
        "b" Q "c" -> "bbcc";
        "c" Q -> Q "c";
    });

    sentences (10, grammar! {
        Start -> S;
        S -> "ab" C | "a" S Q;
        "b" Q C -> "bb" C C;
        C Q -> C X;
        C X -> Q X;
        Q X -> Q C;
        C -> "c";
    });

    sentences (10, grammar! {
        Start -> Moves;
        // circle-movements-for-manhattan-turtle
        Moves -> "north " Moves "south " | "east " Moves "west " | ε;
        ε -> "";
        // the following are just
        //   swapping pathes generated by the above rule
        "north east " -> "east north ";
        "north south " -> "south north ";
        "north west " -> "west north ";
        "east north " -> "north east ";
        "east south " -> "south east ";
        "east west " -> "west east ";
        "south north " -> "north south ";
        "south east " -> "east south ";
        "south west " -> "west south ";
        "west north " -> "north west ";
        "west east " -> "east west ";
        "west south " -> "south west ";
    });

    sentences (10, grammar! {
        Start -> Sexp;
        Sexp -> "(" SexpList ")" | Bool;
        SexpList -> Sexp | Sexp " " SexpList;
        Bool -> "true" | "false";
    });

    sentences (10, grammar! {
        Start -> S;
        S -> "a" B | "b" A;
        A -> "a" | "a" S | "b" A A;
        B -> "b" | "b" S | "a" B B;
    });

    sentences (20, grammar! {
        // L = "a"^m "b"^n "c"^n | "a"^p "b"^p "c"^q;
        Start -> S;
        S -> A BC | AB C;
        A -> "a" | "a" A;
        BC -> "bc" | "b" BC "c";
        AB -> "ab" | "a" AB "b";
        C -> "c" | "c" C;
    });

    sentences (10, grammar! {
        Start -> S;
        S -> S "b" | "a";
    });
}
