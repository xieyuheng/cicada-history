#+property: tangle lib.rs
#+title: parsing
- new `Generation`
- simple error detection
- merge `grammar-tech` in `parsing-tech` for phrase-grammar
- API -- with docs
- preprocess grammar to get least_length
- preprocess grammar to report infinite recursion
- handle left-recursion
- pretty-print of linear tree
- command line tool -- with docs
* prolog

*** feature

    #+begin_src rust
    #![feature (uniform_paths)]

    #![allow (unused_parens)]
    #![allow (dead_code)]
    #![allow (unused_macros)]
    #+end_src

*** use

    #+begin_src rust
    use std::collections::VecDeque;
    use std::str::FromStr;
    use std::fmt;
    use regex::Regex;
    use dic::Dic;
    #+end_src

* Sym

*** Sym

    #+begin_src rust
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq)]
    pub enum Sym {
        Str {
            string: String,
        },
        Ref {
            rule_name: String,
        },
        RefChoice {
            rule_name: String,
            choice_name: String,
        },
        Call {
            rule_name: String,
            arg_dic: Dic <Sym>,
        },
        CallChoice {
            rule_name: String,
            choice_name: String,
            arg_dic: Dic <Sym>,
        },
        Union {
            exp_vec: Vec <Sym>,
        },
    }
    #+end_src

* Rule

*** Rule

    #+begin_src rust
    /// A rule is a dic of choices.
    /// - single-choice-rule is not handled specially.
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq)]
    pub struct Rule {
        rule_name: String,
        ty: Ty,
        choice_dic: Dic <Choice>,
    }
    #+end_src

*** Ty

    #+begin_src rust
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq)]
    pub enum Ty {
        Str,
        Gr,
        Var {
            name: String,
        },
        Arrow {
            ante: Vec <Ty>,
            succ: Box <Ty>,
        },
    }
    #+end_src

* Choice

*** Choice

    #+begin_src rust
    /// A choice is a vec of exps.
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq)]
    pub struct Choice {
        rule_name: String,
        choice_name: String,
        ty: Ty,
        arg_dic: Dic <Sym>,
        exp_vec: Vec <Sym>,
    }
    #+end_src

* Sta

*** Sta

    #+begin_src rust
    /// `Sta` for statement
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq)]
    pub struct Sta {

    }
    #+end_src

* Grammar

*** Grammar

    #+begin_src rust
    /// A Grammar contains a dic of rules.
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq)]
    pub struct Grammar {
        rule_dic: Dic <Rule>,
    }
    #+end_src

*** Grammar::new

    #+begin_src rust
    impl Grammar {
        pub fn new () -> Self {
            Grammar { rule_dic: Dic::new () }
        }
    }
    #+end_src

*** GrammarError

    #+begin_src rust
    #[derive (Debug)]
    pub struct GrammarError;
    #+end_src

*** [todo] Grammar::from_str
*** Grammar::exe

    #+begin_src rust
    impl Grammar {
        fn exe (
            &mut self,
            sta: Sta,
        ) -> Result <(), GrammarError> {
            unimplemented! ()
        }
    }
    #+end_src

*** Grammar::assign_choice

    #+begin_src rust
    impl Grammar {
        fn assign_choice (
            &mut self,
            sta: Sta,
        ) -> Result <(), GrammarError> {
            unimplemented! ()
        }
    }
    #+end_src

*** Grammar::assign_type

    #+begin_src rust
    impl Grammar {
        fn assign_type (
            &mut self,
            sta: Sta,
        ) -> Result <(), GrammarError> {
            unimplemented! ()
        }
    }
    #+end_src

*** Grammar::assign_alias

    #+begin_src rust
    impl Grammar {
        fn assign_alias (
            &mut self,
            sta: Sta,
        ) -> Result <(), GrammarError> {
            unimplemented! ()
        }
    }
    #+end_src

* ParseTree

*** ParseTree

    #+begin_src rust
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq)]
    pub struct ParseTree {
        head: Choice,
        body: Vec <ParseTree>,
    }
    #+end_src

* Generation

*** [todo] Generation

* Parsing

*** [todo] Parsing
