#+html_head: <link rel="stylesheet" href="../../css/org-page.css"/>
#+title: Structure and Interpretation of Computer Programs

- by Harold Abelson and Gerald Jay Sussman

* 1 building abstractions with procedures

*** (john locke) the acts of the mind that exerts its power over simple ideas

    1. Combining several simple ideas into one compound one,
       and thus all *complex ideas* are made.

    2. The second is bringing two ideas, whether simple or complex, together,
       and setting them by one another
       so as to take a view of them at once,
       without uniting them into one,
       by which it gets all its *ideas of relations*.

    3. The third is separating them from
       all other ideas that accompany them in their real existence:
       this is called abstraction,
       and thus all its *general ideas* are made.

*** three mechanisms of language for combining simple ideas to form more complex ideas

    1. primitive expressions,
       which represent the simplest entities the language is concerned with,

    2. means of combination,
       by which compound elements are built from simpler ones, and

    3. means of abstraction,
       by which compound elements can be named and manipulated as units.

       - x -
         we can think of algebraic datatype here,
         since merely naming function and data is trivial.

*** 1.1 the elements of programming
***** 1.1.1 expressions
***** 1.1.2 naming and the environment
***** 1.1.3 evaluating combinations
***** 1.1.4 compound procedures
***** 1.1.5 the substitution model for procedure application
***** 1.1.6 conditional expressions and predicates
***** 1.1.7 example: square roots by newton's method
***** 1.1.8 procedures as black-box abstractions
*** 1.2 procedures and the processes they generate
***** 1.2.1 linear recursion and iteration
***** 1.2.2 tree recursion
***** 1.2.3 orders of growth
***** 1.2.4 exponentiation
***** 1.2.5 greatest common divisors
***** 1.2.6 example: testing for primality
*** 1.3 formulating abstractions with higher-order procedures
***** 1.3.1 procedures as arguments
***** 1.3.2 constructing procedures using lambda
***** 1.3.3 procedures as general methods
***** 1.3.4 procedures as returned values
* 2 building abstractions with data
*** 2.1 introduction to data abstraction
***** 2.1.1 example: arithmetic operations for rational numbers
***** 2.1.2 abstraction barriers
***** 2.1.3 what is meant by data?
***** 2.1.4 extended exercise: interval arithmetic
*** 2.2 hierarchical data and the closure property
***** 2.2.1 representing sequences
***** 2.2.2 hierarchical structures
***** 2.2.3 sequences as conventional interfaces
***** 2.2.4 example: a picture language
*** 2.3 symbolic data
***** 2.3.1 quotation
***** 2.3.2 example: symbolic differentiation
***** 2.3.3 example: representing sets
***** 2.3.4 example: huffman encoding trees
*** 2.4 multiple representations for abstract data
***** 2.4.1 representations for complex numbers
***** 2.4.2 tagged data
***** 2.4.3 data-directed programming and additivity
*** 2.5 systems with generic operations
***** 2.5.1 generic arithmetic operations
***** 2.5.2 combining data of different types
***** 2.5.3 example: symbolic algebra
* 3 modularity, objects, and state
*** 3.1 assignment and local state
***** 3.1.1 local state variables
***** 3.1.2 the benefits of introducing assignment
***** 3.1.3 the costs of introducing assignment
*** 3.2 the environment model of evaluation
***** 3.2.1 the rules for evaluation
***** 3.2.2 applying simple procedures
***** 3.2.3 frames as the repository of local state
***** 3.2.4 internal definitions
*** 3.3 modeling with mutable data
***** 3.3.1 mutable list structure
***** 3.3.2 representing queues
***** 3.3.3 representing tables
***** 3.3.4 a simulator for digital circuits
***** 3.3.5 propagation of constraints
*** 3.4 concurrency: time is of the essence
***** 3.4.1 the nature of time in concurrent systems
***** 3.4.2 mechanisms for controlling concurrency
*** 3.5 streams
***** 3.5.1 streams are delayed lists
***** 3.5.2 infinite streams
***** 3.5.3 exploiting the stream paradigm
***** 3.5.4 streams and delayed evaluation
***** 3.5.5 modularity of functional programs and modularity of objects
* 4 metalinguistic abstraction
*** 4.1 the metacircular evaluator
***** 4.1.1 the core of the evaluator
***** 4.1.2 representing expressions
***** 4.1.3 evaluator data structures
***** 4.1.4 running the evaluator as a program
***** 4.1.5 data as programs
***** 4.1.6 internal definitions
***** 4.1.7 separating syntactic analysis from execution
*** 4.2 variations on a scheme -- lazy evaluation
***** 4.2.1 normal order and applicative order
***** 4.2.2 an interpreter with lazy evaluation
***** 4.2.3 streams as lazy lists
*** 4.3 variations on a scheme -- nondeterministic computing
***** 4.3.1 amb and search
***** 4.3.2 examples of nondeterministic programs
***** 4.3.3 implementing the amb evaluator
*** 4.4 logic programming
***** 4.4.1 deductive information retrieval
***** 4.4.2 how the query system works
***** 4.4.3 is logic programming mathematical logic?
***** 4.4.4 implementing the query system
* 5 computing with register machines
*** 5.1 designing register machines
***** 5.1.1 a language for describing register machines
***** 5.1.2 abstraction in machine design
***** 5.1.3 subroutines
***** 5.1.4 using a stack to implement recursion
***** 5.1.5 instruction summary
*** 5.2 a register-machine simulator
***** 5.2.1 the machine model
***** 5.2.2 the assembler
***** 5.2.3 generating execution procedures for instructions
***** 5.2.4 monitoring machine performance
*** 5.3 storage allocation and garbage collection
***** 5.3.1 memory as vectors
***** 5.3.2 maintaining the illusion of infinite memory
*** 5.4 the explicit-control evaluator
***** 5.4.1 the core of the explicit-control evaluator
***** 5.4.2 sequence evaluation and tail recursion
***** 5.4.3 conditionals, assignments, and definitions
***** 5.4.4 running the evaluator
*** 5.5 compilation
***** 5.5.1 structure of the compiler
***** 5.5.2 compiling expressions
***** 5.5.3 compiling combinations
***** 5.5.4 combining instruction sequences
***** 5.5.5 an example of compiled code
***** 5.5.6 lexical addressing
***** 5.5.7 interfacing compiled code to the evaluator
