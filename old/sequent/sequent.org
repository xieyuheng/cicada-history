#+title: sequent

* [todo-stack]

*** type constructor can occur in body

    - type constructor need field_name too

*** unification digraph

    - what is its property ?
      [note that only hypo can be bound to]

    - what is its interface ?

* [note]

*** mutual recursive

    - exe call infer through ante-prepare
    - infer call cut on clo-obj-t
    - cut call infer on non den-u

    ------

    - thus it is hard to incrementally test this implementation

*** todo-case-t to done-case-t

    - every time we amend a hypo-obj-t's value

    - then, every time we see a todo-case-t
      we know we can not change it to a done-case-t yet
      because we already tried

*** ffi

    - to handle ffi,
      primitive function must can be applied to hypo-obj,
      and return new proxy obj.

      thus I do not implement this feature for now.

* env -- environment

*** env-t

    #+begin_src cicada
    (+data env-t
      .name-dict : [name-t den-u dict-t]
      .data-stack : [obj-u list-u]
      .mark-stack : [nat-u list-u]
      .frame-stack : [frame-u list-u]
      .scope-stack : [string-t obj-u dict-t list-u]
      .goal-stack : [goal-t list-u]
      .hypo-dict : [hypo-id-t obj-u dict-t]
      .case-dict : [case-id-t case-u dict-t])
    #+end_src

*** name-t

    #+begin_src cicada
    (+alias name-t [string-t list-u])
    #+end_src

*** name-dict

***** name-dict-get

      #+begin_src cicada
      (+fun name-dict-get
        : (-> env-t (: name name-t) -- env-t den-u)
        dup .name-dict name dict-get)
      #+end_src

*** data-stack

***** data-stack-push

      #+begin_src cicada
      (+fun data-stack-push
        : (-> (: env env-t) (: obj obj-u) -- env-t)
        (. .data-stack = [obj env.data-stack cons])
        env clone)
      #+end_src

***** data-stack-pop

      #+begin_src cicada
      (+fun data-stack-pop
        : (-> (: env env-t) -- env-t obj-u)
        (. .data-stack = [env.data-stack.cdr])
        env clone
        env.data-stack.car)
      #+end_src

***** data-stack-drop

      #+begin_src cicada
      (+fun data-stack-drop
        : (-> env-t -- env-t)
        data-stack-pop drop)
      #+end_src

***** data-stack-tos

      #+begin_src cicada
      (+fun data-stack-tos
        : (-> env-t -- env-t obj-u)
        dup .data-stack.car)
      #+end_src

***** >< data-stack-n-pop

      #+begin_src cicada
      (+fun data-stack-n-pop
        : (-> env-t nat-u -- env-t obj-u list-u)
        )
      #+end_src

***** >< data-stack-zip-by-list

      #+begin_src cicada
      (+fun data-stack-zip-by-list
        : (-> env-t (: list t list-u)
           -- env-t t obj-u dict-t)
        )
      #+end_src

*** mark-stack

***** mark-stack-push

      #+begin_src cicada
      (+fun mark-stack-push
        : (-> (: env env-t) (: x nat-u) -- env-t)
        (. .mark-stack = [x env.mark-stack cons])
        env clone)
      #+end_src

***** mark-stack-pop

      #+begin_src cicada
      (+fun mark-stack-pop
        : (-> (: env env-t) -- env-t nat-u)
        (. .mark-stack = [env.mark-stack.cdr])
        env clone
        env.mark-stack.car)
      #+end_src

***** mark-stack-mark

      #+begin_src cicada
      (+fun mark-stack-mark
        : (-> env-t -- env-t)
        dup .data-stack list-length
        mark-stack-push)
      #+end_src

***** mark-stack-collect

      #+begin_src cicada
      (+fun mark-stack-collect
        : (-> env-t -- env-t obj-u list-u)
        dup .data-stack list-length mark-stack-pop sub
        data-stack-n-pop)
      #+end_src

*** frame-stack

***** frame-u

      #+begin_src cicada
      (+union frame-u
        scoping-frame-t
        simple-frame-t)
      #+end_src

***** scoping-frame-t

      #+begin_src cicada
      (+data scoping-frame-t
        .body : [exp-u list-u]
        .index : nat-u)
      #+end_src

***** simple-frame-t

      #+begin_src cicada
      (+data simple-frame-t
        .body : [exp-u list-u]
        .index : nat-u)
      #+end_src

***** frame-stack-push

      #+begin_src cicada
      (+fun frame-stack-push
        : (-> (: env env-t) (: frame frame-u) -- env-t)
        (. .frame-stack = [frame env.frame-stack cons])
        env clone)
      #+end_src

***** frame-stack-pop

      #+begin_src cicada
      (+fun frame-stack-pop
        : (-> (: env env-t) -- env-t frame-u)
        (. .frame-stack = [env.frame-stack.cdr])
        env clone
        env.frame-stack.car)
      #+end_src

***** frame-stack-drop

      #+begin_src cicada
      (+fun frame-stack-drop
        : (-> env-t -- env-t)
        frame-stack-pop drop)
      #+end_src

***** frame-stack-tos

      #+begin_src cicada
      (+fun frame-stack-tos
        : (-> env-t -- env-t frame-u)
        dup .frame-stack.car)
      #+end_src

***** top-frame-finished-p

      #+begin_src cicada
      (+fun top-frame-finished-p
        : (-> env-t -- env-t bool-u)
        frame-stack-tos (let frame)
        frame.index frame.body list-length equal-p)
      #+end_src

***** top-frame-next-exp

      #+begin_src cicada
      (+fun top-frame-next-exp
        : (-> env-t -- env-t exp-u)
        frame-stack-pop (let frame)
        (. .index = [frame.index inc])
        frame clone
        frame-stack-push
        frame.body frame.index list-ref)
      #+end_src

*** >< scope-stack

***** >< scope-stack-push

***** >< scope-stack-pop

***** >< scope-stack-drop

***** >< scope-stack-tos

***** scope-get

      #+begin_src cicada
      (+fun scope-get dict-get)
      #+end_src

***** scope-set

      #+begin_src cicada
      (+fun scope-set
        : (-> string-t obj-u dict-t
              (: local-name string-t)
              (: obj obj-u)
           -- string-t obj-u dict-t)
        (dict local-name obj)
        dict-update)
      #+end_src

*** goal-stack

***** goal-t

      #+begin_src cicada
      (+data goal-t
        .lhs : [obj-u list-u]
        .rhs : [obj-u list-u]
        .index : nat-u)
      #+end_src

*** hypo-dict

***** >< hypo-dict-find -- one step

      #+begin_src cicada
      (+fun hypo-dict-find
        : (-> env-t hypo-obj-t
           -- env-t obj-u maybe-u)
        ><)
      #+end_src

*** case-dict

***** >< case-dict-get

      #+begin_src cicada
      (+fun case-dict-get
        : (-> env-t case-obj-t
           -- env-t case-u)
       ><)
      #+end_src

* exp -- expression

*** [note] exp-u

    - each exp-u implement
      1. exe
      2. cut -- for exp-u can occur in body

*** exp-u

    #+begin_src cicada
    (+union exp-u
      call-exp-t
      get-exp-t
      set-exp-t
      clo-exp-t
      arrow-exp-t
      case-exp-t
      ins-u)
    #+end_src

*** call-exp-t

    #+begin_src cicada
    (+data call-exp-t
      .name : name-t)
    #+end_src

*** get-exp-t

    #+begin_src cicada
    (+data get-exp-t
      .local-name : string-t)
    #+end_src

*** set-exp-t

    #+begin_src cicada
    (+data set-exp-t
      .local-name : string-t)
    #+end_src

*** clo-exp-t

    #+begin_src cicada
    (+data clo-exp-t
      .body : [exp-u list-u])
    #+end_src

*** arrow-exp-t

    #+begin_src cicada
    (+data arrow-exp-t
      .ante : [exp-u list-u]
      .succ : [exp-u list-u])
    #+end_src

*** case-exp-t

    #+begin_src cicada
    (+data case-exp-t
      .arg : [exp-u list-u]
      .clause-dict : [string-t clo-exp-t dict-t])
    #+end_src

* eval

*** list-eval

    #+begin_src cicada
    (+fun list-eval
      : (-> (: env env-t) (: exp-list exp-u list-u) -- env-t)
      env .frame-stack list-length (let base)
      (. .body = exp-list
         .index = 0)
      simple-frame-cr
      frame-stack-push
      env base eval-with-base)
    #+end_src

*** eval-with-base

    #+begin_src cicada
    (+fun eval-with-base
      : (-> env-t (: base nat-u) -- env-t)
      (when [dup .frame-stack list-length base equal-p not]
        eval-one-step base recur))
    #+end_src

*** eval-one-step -- pop rs

    #+begin_src cicada
    (note it is assumed that
      there is at least one step to exe)

    (+fun eval-one-step
      : (-> env-t -- env-t)
      (if top-frame-finished-p
        (case frame-stack-pop
          (scoping-frame-t scope-stack-drop)
          (simple-frame-t nop))
        [top-frame-next-exp exe]))
    #+end_src

* collect

*** collect-obj-list

    #+begin_src cicada
    (+fun collect-obj-list
      : (-> env-t exp-u list-u -- env-t obj-u list-u)
      swap mark-stack-mark
      swap list-eval
      mark-stack-collect)
    #+end_src

*** collect-obj

    #+begin_src cicada
    (+fun collect-obj
      : (-> env-t list-u -- env-t obj-u)
      null cons
      collect-obj-list
      car)
    #+end_src

* exe

*** (exe env-t exp-u) -- might push rs

    #+begin_src cicada
    (+gene exe
      : (-> env-t (: exp exp-u) -- env-t)
      "- exe fail" p nl
      "  exp = " p exp p nl
      error)
    #+end_src

*** (exe env-t call-exp-t)

    #+begin_src cicada
    (+disp exe : (-> env-t (: exp call-exp-t) -- env-t)
      exp.name name-dict-get den-exe)
    #+end_src

*** (exe env-t get-exp-t)

    #+begin_src cicada
    (+disp exe
      : (-> env-t (: exp get-exp-t) -- env-t)
      scope-stack-tos exp.local-name scope-get
      data-stack-push)
    #+end_src

*** (exe env-t set-exp-t)

    #+begin_src cicada
    (+disp exe
      : (-> env-t (: exp set-exp-t) -- env-t)
      data-stack-pop (let obj)
      scope-stack-pop exp.local-name obj scope-set
      scope-stack-push)
    #+end_src

*** (exe env-t clo-exp-t)

    #+begin_src cicada
    (+disp exe
      : (-> env-t (: exp clo-exp-t) -- env-t)
      (. .scope = scope-stack-tos
         .body = [exp.body])
      clo-obj-cr
      data-stack-push)
    #+end_src

*** (exe env-t arrow-exp-t)

    #+begin_src cicada
    (+disp exe
      : (-> env-t (: exp arrow-exp-t) -- env-t)
      (. .ante = [exp.ante collect-obj-list]
         .succ = [exp.succ collect-obj-list])
      arrow-obj-cr
      data-stack-push)
    #+end_src

*** (exe env-t case-exp-t)

    #+begin_src cicada
    (+disp exe
      : (-> env-t (: exp case-exp-t) -- env-t)
      exp.arg collect-obj-list car
      exp obj-match)
    #+end_src

*** [note] obj-match

    - when .arg of case-exp-t eval to

      1. data-cons-obj-t
         by the name of the cons
         we can decide which branch to go

      2. hypo-obj-t
         if hypo-obj-t has not bound to value
         we can not decide which branch to go
         a new case-obj-t will be created

*** >< obj-match

    #+begin_src cicada
    (+fun obj-match
      : (-> env-t
            (: obj obj-u)
            (: case-exp case-exp-t)
         -- env-t)
      (case obj
        (data-cons-obj-t
         obj.data-cons-name
         case-exp.clause-dict
         dict-get collect-obj
         clo-obj-apply)
        (hypo-obj-t
         (case [obj hypo-dict-find]
           (some-t
            case-exp recur)
           (none-t
            obj case-exp new-case-obj
            data-stack-push)))
        (case-obj-t
         ><><><)
        (else error)))
    #+end_src

*** new-case-obj

    #+begin_src cicada
    (+fun new-case-obj
      : (-> env-t
            (: obj hypo-obj-t)
            (: case-exp case-exp-t)
         -- env-t case-obj-t)
      case-exp.clause-dict eval-clause-dict (let clause-dict)
      obj clause-dict new-sum-obj (let sum-obj)
      (. .type = sum-obj
         .arg = obj
         .clause-dict = clause-dict)
      todo-case-cr)
    #+end_src

*** >< eval-clause-dict

    #+begin_src cicada
    (+fun eval-clause-dict
      : (-> env-t string-t clo-exp-t dict-t
         -- env-t string-t clo-obj-t dict-t))
    #+end_src

*** [note] new-sum-obj

    - given the data-constructor
      ><><>< hypo argument
      the type of each branch of a (match) can be known

*** >< new-sum-obj

    #+begin_src cicada
    (+fun new-sum-obj
      : (-> env-t
            (: obj hypo-obj-t)
            (: clause-dict [string-t clo-obj-t dict-t])
         -- env-t sum-obj-t)
       )
    #+end_src

*** >< clo-obj-apply

    #+begin_src cicada
    (+fun clo-obj-apply
      : (-> env-t clo-obj-t -- env-t)
      )
    #+end_src

* >< cut

*** [note] cut

    - to cut a function
      we only need to use the arrow of the function.

    - to cut the arrow of a function
      is to unify its antecedent
      with the objects in the data-stack,
      and return its succedent as return value.

      - the the values of objects
        is unified with values of the antecedent.
        thus it is a value-value unification.
        [v-v-uni]

    - to cut a hypo
      is to push this objects into data-stack
      and use its type as object.

    - to cut a data such as {succ}
      we must infer its type,
      i.e. an arrow object

    ------

    - x -
      when cutting a fun-den-t
      the argument in the ds might be sum-obj-t
      the result of the cut must also be sum-obj-t

*** (cut env-t exp-u)

    #+begin_src cicada
    (+gene cut
      : (-> (: env env-t) (: exp exp-u) -- env-t)
      error)
    #+end_src

*** >< list-cut

    #+begin_src cicada
    (+fun list-cut
      : (-> env-t (: exp-list exp-u list-u) -- env-t)
      )
    #+end_src

* >< ins -- instruction

*** [note] ins-u

    - an ins-u is a special exp-u
      in the sense that
      as a data it has no fields

*** ins-u

    #+begin_src cicada
    (+union ins-u
      suppose-ins-t
      dup-ins-t
      infer-ins-t
      apply-ins-t)

    (+data suppose-ins-t)
    (+data dup-ins-t)
    (+data infer-ins-t)
    (+data apply-ins-t)
    #+end_src

*** [note] about hypothetically constructed object

    - in oop,
      when you ask for a new object of a class,
      the init function of the class is used
      to form an object of that class.
      [the init function might takes arguments]

    - in cicada,
      when you ask for a new object of a type,

      1. the type might has many data-constructors,
         we do not know
         which data-constructors should be used,
         thus a hypo will be created.

      2. the type might has only one data-constructor.
         but it takes arguments,
         we do not have the arguments yet,
         thus a hypo will be created.

*** [note] suppose-ins-t

    - [n : <nat>]
      compiles to
      [<nat> suppose dup (let n) infer]

    - two occurences of [<nat> suppose]
      create two different hypo-obj-ts.

*** suppose-ins-t exe

    #+begin_src cicada
    (+disp exe
      : (-> env-t (: ins suppose-ins-t) -- env-t)
      data-stack-pop (let type)
      generate-hypo-id (let hypo-id)
      (. .hypo-id = hypo-id
         .type = type)
      hypo-type-obj-cr
      (let hypo-type-obj)
      (. .hypo-id = hypo-id
         .hypo-type = hypo-type-obj)
      hypo-obj-cr
      data-stack-push)
    #+end_src

* den -- denotation

*** [note] den-u

    - each den-u must implement
      1. den-exe
      2. den-cut

*** den-u

    #+begin_src cicada
    (+union den-u
      fun-den-t
      data-cons-den-t
      type-cons-den-t)
    #+end_src

*** fun-den-t

    #+begin_src cicada
    (+data fun-den-t
      .type : arrow-exp-t
      .body : [exp-u list-u])
    #+end_src

*** data-cons-den-t

    #+begin_src cicada
    (+data data-cons-den-t
      .type : exp-u
      .data-cons-name : string-t
      .field-name-list : [string-t list-u]
      .type-cons-name : string-t)
    #+end_src

*** type-cons-den-t

    #+begin_src cicada
    (+data type-cons-den-t
      .type : exp-u
      .type-cons-name : string-t
      .field-name-list : [string-t list-u]
      .data-cons-name-list : [string-t list-u])
    #+end_src

* den-exe

*** (den-exe env-t den-u)

    #+begin_src cicada
    (+gene den-exe
      : (-> (: env env-t) (: den den-u) -- env-t)
      "- den-exe fail" p nl
      "  unknown den : " p den p nl
      error)
    #+end_src

*** [note] fun-den-t

    - to execute a function
      is to apply a function
      to objects in the data-stack.

    - when you execute a function,
      a new arrow object will be created
      from the type of the function.

    - the antecedent is used
      to do an unification with the objects in the data-stack.

    - note that,
      new-frame will be formed for each function call,
      to give them new scope for local bindings.

*** (den-exe env-t fun-den-t)

    #+begin_src cicada
    (+disp den-exe
      : (-> env-t (: den fun-den-t) -- env-t)
      (dict) scope-stack-push
      den.type collect-obj (let type)
      type.ante ante-prepare
      type.ante ante-correspond
      (. .body = den.body
         .index = 0)
      scoping-frame-cr
      frame-stack-push)
    #+end_src

*** (den-exe env-t data-cons-den-t)

    #+begin_src cicada
    (+disp den-exe
      : (-> env-t (: den data-cons-den-t)
         -- env-t)
      den.type collect-obj (let type)
      type.ante ante-prepare
      den.field-name-list data-stack-zip-by-list (let fields)
      (. .type = [type type->return-type]
         .data-cons-name = den.data-cons-name
         .fields = fields)
      data-cons-obj-cr
      data-stack-push)
    #+end_src

*** (den-exe env-t type-cons-den-t)

    #+begin_src cicada
    (+disp den-exe
      : (-> env-t (: den type-cons-den-t)
         -- env-t)
      den.type collect-obj (let type)
      type.ante ante-prepare
      den.field-name-list data-stack-zip-by-list (let fields)
      (. .type = [type type->return-type]
         .type-cons-name = den.type-cons-name
         .fields = fields)
      type-cons-obj-cr
      data-stack-push)
    #+end_src

*** [note] ante-prepare

    1. get obj-u list-u from ds of length of ante

    2. obj-u list-u infer and unifiy with ante

       - this unification can let us write less types.
         for example, if we know 'add' is going to be applied
         to x, we do not need to assert [x : <nat>]

       - this unification might be part of the type-checking,
         because function application
         can happen during type-checking.
         if it fails, type-check fails.

       - data-constructors are special functions.
         thus they also do such unification.

*** ante-prepare

    #+begin_src cicada
    (+fun ante-prepare
      : (-> env-t (: ante obj-u list-u) -- env-t)
      ante list-length data-stack-n-pop (let obj-list)
      obj-list {infer} list-map ante list-unifiy)
    #+end_src

*** [note] ante-correspond

    1. for hypo-type-obj-t in ante
       type->obj and unifiy with corresponding obj-u

    2. put those obj-u s
       that not correspond with hypo-type-obj-t
       back to ds

    ------

    - note that, in ante,
      the occurance of hypo-type-obj-t,
      is used as a criterion to take value out of ds.
      - not the occurance of local name.

*** >< ante-correspond

    #+begin_src cicada
    (+fun ante-correspond
      : (-> env-t (: ante obj-u list-u) -- env-t)
      )
    #+end_src

*** type->return-type

    #+begin_src cicada
    (+fun type->return-type
      : (-> obj-u -- obj-u)
      (when [dup arrow-obj-p]
        .succ .car))
    #+end_src

* >< den-cut

* obj -- object

*** [note] obj-u

    - each obj-u must implement
      1. infer
      2. cover
      3. unify

*** obj-u

    #+begin_src cicada
    (+union obj-u
      data-cons-obj-t type-cons-obj-t
      clo-obj-t arrow-obj-t
      hypo-obj-t hypo-type-obj-t
      case-obj-t sum-obj-t)
    #+end_src

*** data-cons-obj-t

    #+begin_src cicada
    (+data data-cons-obj-t
      .type : type-cons-obj-t
      .data-cons-name : string-t
      .fields : [string-t obj-u dict-t])
    #+end_src

*** type-cons-obj-t

    #+begin_src cicada
    (+data type-cons-obj-t
      .type : ><><><
      .type-cons-name : string-t
      .fields : [string-t obj-u dict-t])
    #+end_src

*** clo-obj-t

    #+begin_src cicada
    (+data clo-obj-t
      .scope : [string-t obj-u dict-t]
      .body : [exp-u list-u])
    #+end_src

*** arrow-obj-t

    #+begin_src cicada
    (+data arrow-obj-t
      .ante : [obj-u list-u]
      .succ : [obj-u list-u])
    #+end_src

*** [note] hypo-obj-t & hypo-type-obj-t

    - hypo-obj-t is the hero of unification.

    - hypo-obj-t denotes "hypothetically constructed object"
      whose type is known, but value is unknown for now.

      - a phrase learned from Arend Heyting
        << Intuitionistic Views on the Nature of Mathematics >>

    - in the future,
      unification-stack will be used
      to bind hypo-obj-t's value.

      - a hypo-obj-t can be viewed as a proxy to actual obj-u
        [through unification-stack].

    - be careful about
      'information non-decreasing principle'
      when asked for the type of a hypo-obj-t
      we must maintain the type is of which hypo-obj-t.

      thus hypo-type-obj-t is used

    - hypo-obj-t infer hypo-type-obj-t
      hypo-type-obj-t type->obj hypo-obj-t

      - note that
        hypo-type-obj-t is the only obj-u
        which 'type->obj' can applied to

*** hypo-id-t

    #+begin_src cicada
    (+data hypo-id-t
      .id : string-t)
    #+end_src

*** hypo-obj-t

    #+begin_src cicada
    (+data hypo-obj-t
      .hypo-id : hypo-id-t
      .hypo-type : hypo-type-obj-t)
    #+end_src

*** hypo-type-obj-t

    #+begin_src cicada
    (+data hypo-type-obj-t
      .hypo-id : hypo-id-t
      .type : obj-u)
    #+end_src

*** >< hypo-type-obj->hypo-obj

    #+begin_src cicada
    (+fun hypo-type-obj->hypo-obj
      : (-> env-t hypo-type-obj-t
         -- env-t hypo-obj-t))
    #+end_src

*** [note] case-obj-t & sum-obj-t

    - case-obj-t proxy to case-u
      for the state of case-u
      might can change from todo-case-t to done-case-t

    - the type of todo-case-t
      is sum-obj-t

    - the type of done-case-t
      is one branch of the sum-obj-t

*** case-id-t

    #+begin_src cicada
    (+data case-id-t
      .id : string-t)
    #+end_src

*** case-obj-t

    #+begin_src cicada
    (+data case-obj-t
      .case-id : case-id-t)
    #+end_src

*** case-u

    #+begin_src cicada
    (+union case-u
      todo-case-t
      done-case-t)

    (+data todo-case-t
      .type : sum-obj-t
      .arg : hypo-obj-t
      .clause-dict : [string-t clo-obj-t dict-t])

    (+data done-case-t
      .type : obj-u
      .result : obj-u)
    #+end_src

*** sum-obj-t

    #+begin_src cicada
    (+data sum-obj-t
      .objs : [obj-u list-u])
    #+end_src

* infer

*** (infer env-t obj-u)

    #+begin_src cicada
    (+gene infer
      : (-> (: env env-t) (: obj obj-u) -- env-t obj-u)
      error)
    #+end_src

*** >< (infer env-t data-cons-obj-t)

    #+begin_src cicada
    (+disp infer
     : (-> env-t data-cons-obj-t
        -- env-t type-cons-obj-t)
     )
    #+end_src

*** >< (infer env-t type-cons-obj-t)

    #+begin_src cicada
    (+disp infer
     : (-> env-t type-cons-obj-t
        -- env-t type-cons-obj-t))
    #+end_src

*** >< (infer env-t clo-obj-t)

    #+begin_src cicada
    (note every time the the type of a closure is asked for,
      we use the body of the closure
      to construct a new arrow object.)

    (+disp infer
      : (-> env-t clo-obj-t
         -- env-t arrow-obj-t))
    #+end_src

*** >< (infer env-t arrow-obj-t)

    #+begin_src cicada
    (+disp infer
      : (-> env-t arrow-obj-t
         -- env-t arrow-obj-t))
    #+end_src

*** >< (infer env-t arrow-obj-t)

    #+begin_src cicada
    (+disp infer
      : (-> env-t hypo-obj-t
         -- env-t hypo-type-obj-t))
    #+end_src

*** >< (infer env-t hypo-type-obj-t)

    #+begin_src cicada
    (+disp infer
      : (-> env-t hypo-type-obj-t
         -- env-t ><><><))
    #+end_src

*** >< (infer env-t case-obj-t)

    #+begin_src cicada
    (+disp infer
     : (-> env-t case-obj-t
        -- env-t obj-u))
    #+end_src

*** >< (infer env-t sum-obj-t)

    #+begin_src cicada
    (+disp infer
     : (-> env-t sum-obj-t
        -- env-t sum-obj-t))
    #+end_src

* >< unify

*** [note] sub term lattice & subtype relation

    - ><

*** >< list-unifiy

    #+begin_src cicada
    (+fun list-unifiy
      : (-> env-t (: l obj-u list-u) (: r obj-u list-u) -- env-t)
      )
    #+end_src

*** >< unify-one-step

    #+begin_src cicada
    (+fun unify-one-step
      : (-> env-t -- env-t)
      )
    #+end_src

*** unify

    #+begin_src cicada
    (+gene unify
      : (-> env-t obj-u obj-u -- env-t)
      )
    #+end_src

* >< cover

*** list-cover

    #+begin_src cicada
    (+fun list-cover
      : (-> env-t obj-u list-u obj-u list-u
         -- env-t))
    #+end_src

* check

*** [note] fun-den-type-check

    - to type-check a function definition,
      [of which the type exp must be a arrow-exp-t]
      1. we first exe the ante of the arrow-exp-t
      2. and cut the body exp to it
         and collect the result
      3. exe the succ of the arrow-exp-t
         cover it to the result of cut

*** fun-den-type-check

    #+begin_src cicada
    (+fun fun-den-type-check
      : (-> env-t (: den fun-den-t))
      mark-stack-mark
      den.type.ante list-eval
      den.body list-cut
      mark-stack-collect (let results)
      den.type.succ collect-obj-list
      results list-cover)
    #+end_src
