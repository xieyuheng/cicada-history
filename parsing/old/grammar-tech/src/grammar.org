#+property: tangle lib.rs
#+title: grammar tech

* [todo-stack]
*** ch2
    - predicates for rank
    - verify a production process
    - remove non-productive rules from context-free grammar
      - and report to grammar specifier about non-productive rules
    - CS grammar
      - decidability
        if the empty string is not the first string
        it will never appear
      - we can implement a predicate
        to ask whether a sentence is in the language
    - CF grammar
      our grammar might never produce a sentence
      but now we can test for that beforehand
* feature

  #+begin_src rust
  #![feature(uniform_paths)]
  #![allow(unused_parens)]
  #![allow(dead_code)]
  #![allow(unused_macros)]
  #+end_src

* use

  #+begin_src rust
  use std::collections::VecDeque;
  #+end_src

* Grammar

*** Grammar

    #+begin_src rust
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq)]
    pub struct Grammar {
        rule_vec: Vec <Rule>,
    }
    #+end_src

*** Grammar::new

    #+begin_src rust
    impl Grammar {
        pub fn new () -> Self {
            let rule_vec: Vec <Rule> = Vec::new ();
            Grammar { rule_vec }
        }
    }
    #+end_src

*** Grammar::rule

    #+begin_src rust
    impl Grammar {
        pub fn rule (mut self, rule: Rule) -> Self {
            self.rule_vec.push (rule);
            self
        }
    }
    #+end_src

*** Grammar::apply

    #+begin_src rust
    impl Grammar {
        fn apply (
            &self,
            form: &SententialForm,
        ) -> Vec <SententialForm> {
            let mut result: Vec <SententialForm> = Vec::new ();
            for rule in self.rule_vec.iter () {
                let mut form_vec = rule.apply (form);
                result.append (&mut form_vec);
            }
            result
        }
    }
    #+end_src

* Rule

*** Rule

    #+begin_src rust
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq)]
    pub struct Rule {
        pub ante: Vec <Token>,
        pub succ: Vec <Vec <Token>>,
    }
    #+end_src

*** Rule::new

    #+begin_src rust
    impl Rule {
        pub fn new () -> Self {
            Rule {
                ante: Vec::new (),
                succ: Vec::new (),
            }
        }
    }
    #+end_src

*** Rule::choice

    #+begin_src rust
    impl Rule {
        pub fn choice (mut self) -> Self {
            self.succ.push (Vec::new ());
            self
        }
    }
    #+end_src

*** Rule::var

    #+begin_src rust
    impl Rule {
        pub fn var (mut self, name: &str) -> Self {
            if self.succ.is_empty () {
                self.ante.push (Token::new_var (name));
            } else {
                let mut symbol_vec = self.succ.pop () .unwrap ();
                symbol_vec.push (Token::new_var (name));
                self.succ.push (symbol_vec);
            }
            self
        }
    }
    #+end_src

*** Rule::chars

    #+begin_src rust
    impl Rule {
        pub fn chars (mut self, string: &str) -> Self {
            if self.succ.is_empty () {
                let mut symbol_vec = Token::new_chars (string);
                self.ante.append (&mut symbol_vec);
            } else {
                let mut symbol_vec = self.succ.pop () .unwrap ();
                symbol_vec.append (&mut Token::new_chars (string));
                self.succ.push (symbol_vec);
            }
            self
        }
    }
    #+end_src

*** symbol_vec_eq

    #+begin_src rust
    fn symbol_vec_eq (
        ante: &[Token],
        succ: &[Token],
    ) -> bool {
        ante == succ
    }
    #+end_src

*** Rule::apply

    #+begin_src rust
    impl Rule {
        fn apply (
            &self,
            form: &SententialForm,
        ) -> Vec <SententialForm> {
            let mut result: Vec <SententialForm> = Vec::new ();
            let len = self.ante.len ();
            if len <= form.len () {
                let offset = form.len () - len;
                for i in 0..offset+1 {
                    if symbol_vec_eq (
                        &self.ante,
                        &form.symbol_vec [i..i+len])
                    {
                        for symbol_vec in &self.succ {
                            let new_form = form.substitute (
                                i, len,
                                symbol_vec);
                            result.push (new_form);
                        }
                    }
                }
            }
            result
        }
    }
    #+end_src

* Token

*** Token

    #+begin_src rust
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq)]
    pub enum Token {
        Var (String),
        Char  (char),
    }
    #+end_src

*** predicates

    #+begin_src rust
    impl Token {
        pub fn var_p (&self) -> bool {
            if let Token::Var (_) = self {
                true
            } else {
                false
            }
        }

        pub fn str_p (&self) -> bool {
            if let Token::Char  (_) = self {
                true
            } else {
                false
            }
        }
    }
    #+end_src

*** Token::new_var

    #+begin_src rust
    impl Token {
        pub fn new_var (name: &str) -> Token {
            Token::Var (String::from (name))
        }
    }
    #+end_src

*** Token::new_chars

    #+begin_src rust
    impl Token {
        pub fn new_chars (string: &str) -> Vec <Token> {
            let mut chars: Vec <Token> = Vec::new ();
            for c in string.chars () {
                chars.push (Token::Char (c))
            }
            chars
        }
    }
    #+end_src

* SententialForm

*** SententialForm

    #+begin_src rust
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq)]
    struct SententialForm {
        symbol_vec: Vec <Token>,
    }
    #+end_src

*** predicates

    #+begin_src rust
    impl SententialForm {
        fn str_p (&self) -> bool {
            self.symbol_vec
                .iter ()
                .all (|symbol| symbol.str_p ())
        }
    }
    #+end_src

*** SententialForm::len

    #+begin_src rust
    impl SententialForm {
        fn len (&self) -> usize {
            self.symbol_vec.len ()
        }
    }
    #+end_src

*** SententialForm::new

    #+begin_src rust
    impl SententialForm {
        fn new (symbol_vec: &Vec <Token>) -> Self {
            let symbol_vec = symbol_vec.clone ();
            SententialForm { symbol_vec }
        }
    }
    #+end_src

*** SententialForm::substitute

    #+begin_src rust
    impl SententialForm {
        fn substitute (
            &self,
            i: usize, len: usize,
            symbol_vec: &Vec <Token>,
        ) -> Self {
            let mut new_symbol_vec: Vec <Token> = Vec::new ();
            for symbol in &self.symbol_vec [0..i] {
                new_symbol_vec.push (symbol.clone ());
            }
            for symbol in symbol_vec {
                new_symbol_vec.push (symbol.clone ());
            }
            for symbol in &self.symbol_vec [i+len..] {
                new_symbol_vec.push (symbol.clone ());
            }
            SententialForm::new (&new_symbol_vec)
        }
    }
    #+end_src

*** SententialForm::into::<String>

    #+begin_src rust
    impl Into <String> for SententialForm {
        fn into (self) -> String {
            let mut result = String::new ();
            for symbol in self.symbol_vec {
                match symbol {
                    Token::Var (name) => {
                        let repr = format! ("{{{}}}", name);
                        result.push_str (&repr);
                    }
                    Token::Char  (c) => {
                        result.push (c);
                    }
                }
            }
            result
        }
    }
    #+end_src

* Generation

*** Generation

    #+begin_src rust
    pub struct Generation {
        statistics: GenerationStatistics,
        grammar: Grammar,
        sentential_form_queue: VecDeque <SententialForm>,
    }
    #+end_src

*** Generation::new

    #+begin_src rust
    impl Generation {
        pub fn new (grammar: Grammar, start: &str) -> Self {
            let statistics = GenerationStatistics {
                sentence_counter: 0,
                step_counter: 0,
                match_counter: 0,
            };
            let mut sentential_form_queue = VecDeque::new ();
            sentential_form_queue.push_back (
                SententialForm::new (
                    &vec! [Token::new_var (start)]));
            Generation {
                statistics, grammar,
                sentential_form_queue,
            }
        }
    }
    #+end_src

*** GenerationStatistics

    #+begin_src rust
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq)]
    struct GenerationStatistics {
        sentence_counter: usize,
        step_counter: usize,
        match_counter: usize,
    }
    #+end_src

*** Generation::finished_p

    #+begin_src rust
    impl Generation {
        pub fn finished_p (&self) -> bool {
            self.sentential_form_queue.is_empty ()
        }
    }
    #+end_src

*** StepResult

    #+begin_src rust
    pub enum StepResult {
        Sentence (String),
        NonSentence,
        Finished,
    }
    #+end_src

*** Generation::step

    #+begin_src rust
    impl Generation {
        pub fn step (&mut self) -> StepResult {
            // print! (".");
            // if self.statistics.step_counter > 1000000 {
            //     // how to make this better ?
            //     panic! ("><");
            // }
            let first = self.sentential_form_queue.pop_front ();
            if let Some (form) = first {
                self.statistics.step_counter += 1;
                if form.str_p () {
                    self.statistics.sentence_counter += 1;
                    let sentence = form.into ();
                    StepResult::Sentence (sentence)
                } else {
                    for new_form in self.grammar.apply (&form) {
                        self.statistics.match_counter += 1;
                        self.sentential_form_queue
                            .push_back (new_form)
                    }
                    StepResult::NonSentence
                }
            } else {
                StepResult::Finished
            }
        }
    }
    #+end_src

*** Generation::next_sentence

    #+begin_src rust
    impl Generation {
        pub fn next_sentence (&mut self) -> Option <String> {
            loop {
                match self.step () {
                    StepResult::Sentence (sentence) => {
                        return Some (sentence);
                    }
                    StepResult::NonSentence => {
                        // go on
                    }
                    StepResult::Finished => {
                        return None;
                    }
                }
            }
        }
    }
    #+end_src

* test

*** generation_test

    #+begin_src rust
    #[cfg(test)]
    mod generation_test {
        use super::*;

        fn example_grammar () -> Grammar {
            // grammar! {
            //     Start -> Sentence;
            //     Sentence -> Name | List and Name;
            //     Name -> tom | dick | harry;
            //     List -> Name | Name, List;
            // }
            Grammar::new ()
                .rule (Rule::new ()
                       .var ("Start")
                       .choice () .var ("Sentence"))
                .rule (Rule::new ()
                       .var ("Sentence")
                       .choice () .var ("Name")
                       .choice ()
                           .var ("List")
                           .chars (" and ")
                           .var ("Name"))
                .rule (Rule::new ()
                       .var ("Name")
                       .choice () .chars ("tom")
                       .choice () .chars ("dick")
                       .choice () .chars ("harry"))
                .rule (Rule::new ()
                       .var ("List")
                       .choice () .var ("Name")
                       .choice ()
                           .var ("Name")
                           .chars (", ")
                           .var ("List"))
        }

        #[test]
        fn test_next_sentence () {
            let mut generation = Generation::new (
                example_grammar (), "Start");
            for _ in 0..1000 {
                let sentence = generation .next_sentence ();
                assert! (sentence.is_some ());
            }
        }
    }
    #+end_src
