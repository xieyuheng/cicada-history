#+property: tangle lib.rs
#+title: ukanren

* prolog

*** feature

    #+begin_src rust
    #![feature (uniform_paths)]

    #![allow (unused_parens)]
    #![allow (dead_code)]
    #![allow (unused_macros)]
    #+end_src

*** use

    #+begin_src rust
    use std::sync::Arc;
    use std::collections::HashMap;
    use uuid::Uuid;
    #+end_src

* Term

*** Term

    #+begin_src rust
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq)]
    pub enum Term {
        Var (Uuid),
        Str (String),
        Vec (Vec <Term>),
    }

    impl Term {
        fn var () -> Term {
            Term::Var (Uuid::new_v4 ())
        }

        fn str (s: &str) -> Term {
            Term::Str (s.to_string ())
        }
    }
    #+end_src

* unify

*** Subst

    #+begin_src rust
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq)]
    pub struct Subst {
        map: HashMap <Uuid, Term>,
    }
    #+end_src

*** Subst::new

    #+begin_src rust
    impl Subst {
        fn new () -> Self {
            Subst {
                map: HashMap::new (),
            }
        }
    }
    #+end_src

*** Subst::extend

    #+begin_src rust
    impl Subst {
        fn extend (&self, var: &Uuid, term: Term) -> Subst {
            let mut map = self.map.clone ();
            map.insert (var.clone (), term);
            Subst { map }
        }
    }
    #+end_src

*** Subst::find

    #+begin_src rust
    impl Subst {
        fn find (&self, var: &Uuid) -> Option <&Term> {
            self.map.get (var)
        }
    }
    #+end_src

*** Subst::walk

    #+begin_src rust
    impl Subst {
        fn walk (&self, term: &Term) -> Term {
            match term {
                Term::Var (var) => {
                    if let Some (new_term) = self.find (&var) {
                        self.walk (new_term)
                    } else {
                        term.clone ()
                    }
                }
                _ => term.clone ()
            }
        }
    }
    #+end_src

*** Subst::unify

    #+begin_src rust
    impl Subst {
        fn unify (
            &self,
            u: &Term,
            v: &Term,
        ) -> Option <Subst> {
            let u = self.walk (u);
            let v = self.walk (v);
            match (u, v) {
                (Term::Var (u), Term::Var (v)) if u == v => {
                    Some (self.clone ())
                }
                (Term::Var (u), v) => {
                    Some (self.extend (&u, v))
                }
                (u, Term::Var (v)) => {
                    Some (self.extend (&v, u))
                }
                (Term::Vec (us), Term::Vec (vs)) => {
                    if us.len () != vs.len () {
                        return None;
                    }
                    let mut subst = self.clone ();
                    for (u, v) in us.iter () .zip (vs.iter ()) {
                        subst = subst.unify (u, v)?;
                    }
                    Some (subst)
                }
                (u, v) => {
                    if u == v {
                        Some (self.clone ())
                    } else {
                        None
                    }
                }
            }
        }
    }
    #+end_src

* Stream

*** Stream

    #+begin_src rust
    #[derive (Clone)]
    #[derive (Debug)]
    #[derive (PartialEq)]
    pub enum Stream {
        Null,
        More {
            subst: Subst,
            next: Box <Stream>,
        },
    }
    #+end_src

*** Stream::mzero

    #+begin_src rust
    impl Stream {
        fn mzero () -> Stream {
            Stream::Null
        }
    }
    #+end_src

*** Stream::unit

    #+begin_src rust
    impl Stream {
        fn unit (subst: Subst) -> Stream {
            let next = Stream::mzero ();
            Stream::More {
                subst,
                next: Box::new (next),
            }
        }
    }
    #+end_src

* Goal

*** eqo

    #+begin_src rust
    fn eqo (
        u: Term,
        v: Term,
    ) -> Arc <Fn (Subst) -> Stream> {
        Arc::new (move |init_subst| {
            if let Some (subst) = init_subst.unify (&u, &v) {
                Stream::unit (subst)
            } else {
                Stream::mzero ()
            }
        })
    }
    #+end_src

*** disj

    #+begin_src rust
    fn disj (
        g1: Arc <Fn (Subst) -> Stream>,
        g2: Arc <Fn (Subst) -> Stream>,
    ) -> Arc <Fn (Subst) -> Stream> {
        Arc::new (move |subst| {
            mplus (g1 (subst.clone ()), g2 (subst))
        })
    }
    #+end_src

*** conj

    #+begin_src rust
    fn conj (
        g1: Arc <Fn (Subst) -> Stream>,
        g2: Arc <Fn (Subst) -> Stream>,
    ) -> Arc <Fn (Subst) -> Stream> {
        Arc::new (move |subst| {
            let s1 = g1 (subst);
            bind (s1, g2.clone ())
        })
    }
    #+end_src

*** mplus

    #+begin_src rust
    fn mplus (s1: Stream, s2: Stream) -> Stream {
        if let Stream::More {
            subst,
            next,
        } = s1 {
            let next = mplus (s2, *next);
            Stream::More {
                subst,
                next: Box::new (next),
            }
        } else {
            s2
        }
    }
    #+end_src

*** bind

    #+begin_src rust
    fn bind (
        s: Stream,
        g: Arc <Fn (Subst) -> Stream>,
    ) -> Stream {
        if let Stream::More {
            subst,
            next,
        } = s {
            mplus (g (subst), bind (*next, g))
        } else {
            Stream::mzero ()
        }
    }
    #+end_src

* test

*** test_unify

    #+begin_src rust
    #[test]
    fn test_unify () {
        let subst = Subst::new ();
        let v = Term::var ();
        let u = Term::var ();
        subst.unify (&v, &u) .unwrap ();
        subst.unify (&u, &u) .unwrap ();
        subst.unify (&v, &v) .unwrap ();
        let bye = Term::str ("bye");
        let love = Term::str ("love");
        let vec1 = Term::Vec (vec! [
            v.clone (),
            bye.clone (),
            u.clone (),
        ]);
        let vec2 = Term::Vec (vec! [
            u.clone (),
            bye.clone (),
            love.clone (),
        ]);
        let subst = subst.unify (&vec1, &vec2) .unwrap ();
        assert_eq! (2, subst.map.len ());
    }
    #+end_src

*** test_goal

    #+begin_src rust
    #[test]
    fn test_goal () {
        let x = Term::var ();
        let y = Term::var ();
        let hi = Term::str ("hi");
        let bye = Term::str ("bye");
        let love = Term::str ("love");
        let g = conj (eqo (x.clone (), hi.clone ()),
                      disj (eqo (y.clone (), bye.clone ()),
                            eqo (y.clone (), love.clone ())));
        println! ("{:?}", g (Subst::new ()));
    }
    #+end_src
